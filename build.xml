<project name='jcreole' default='parse' xmlns:ivy="antlib:org.apache.ivy.ant">
  <!--
    Copyright 2011 Axis Data Management Corp.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
  -->

  <property file="local.properties"/>
  <property file="app.properties"/>
  <property name="javac.sourceVersion" value="1.5"/>
  <property name="javac.targetVersion" value="${javac.sourceVersion}"/>
  <property name="javac.debug" value="true"/>
  <property name="jflex.debug" value="true"/>
  <property name="beaverlib.url" value="http://pub.admc.com/lib-repos"/>

  <import file="ivy-projsetup.xml" />

  <target name="-beaver-setup" description="creates Beaver Ant task"
          depends="-ivy-setup">
    <ivy:cachepath conf="beaver" pathid="beaver.ivyrefid"/>
    <available property="beaver.available" classname="beaver.comp.run.AntTask"
               classpathref="beaver.ivyrefid"/>
    <!-- Converting path only for useful error reporting -->
    <pathconvert property="beaver.path" refid="beaver.ivyrefid"/>
    <fail unless="beaver.available"
          message="Beaver Ant task not accessible in '${beaver.path}'"/>
    <taskdef name="beaver" classname="beaver.comp.run.AntTask"
             classpathref="beaver.ivyrefid"/>
  </target>
  
  <target name="-jflex-setup" description="creates JFlex Ant task"
          depends="-ivy-setup">
    <ivy:cachepath conf="jflex" pathid="jflex.ivyrefid"/>
    <available property="jflex.available" classname="JFlex.anttask.JFlexTask"
               classpathref="jflex.ivyrefid"/>
    <!-- Converting path only for useful error reporting -->
    <pathconvert property="jflex.path" refid="jflex.ivyrefid"/>
    <fail unless="jflex.available"
          message="JFlex Ant task not accessible in '${jflex.path}'"/>
    <taskdef classname="JFlex.anttask.JFlexTask" name="jflex"
              classpathref="jflex.ivyrefid"/>
  </target>
  
  <target name="beaver" description="Run Beaver" depends="-beaver-setup"
          unless="_parser.java.present">
    <mkdir dir="tmp/derived-src"/>
    <!-- Unfortunately task is so careless that it returns success status no
      -  matter what.  Therefore we have to check for ourselves. -->
    <delete file="tmp/derived-src/com/admc/jcreole/CreoleParser.java"/>
    <beaver file='src/com/admc/jcreole/CreoleParser.grammar' reportActions="yes"
            destdir="tmp/derived-src" exportTerminals='yes'/>
    <available property="beaver.success" type="file"
            file="tmp/derived-src/com/admc/jcreole/CreoleParser.java"/>
    <fail unless="beaver.success" message="Beaver failed"/>
  </target>

  <target name="-condl-beaver">
    <!-- Invokes the 'beaver' target only if it is needed.
         Beaver doesn't do its own dependency checking like JFlex does, and will
         rerun the parser-generator when there is no need to. -->
    <dependset>
      <srcfileset dir="src" excludes="**/.*"
                  includes="com/admc/jcreole/*.grammar"/>
    <targetfileset file="tmp/derived-src/com/admc/jcreole/CreoleParser.java"/>
    </dependset>
    <available property="_parser.java.present" type="file"
               file="tmp/derived-src/com/admc/jcreole/CreoleParser.java"/>
    <antcall target="beaver"/>
  </target>

  <target name="jflex" description="run JFlex"
          depends="-condl-beaver, -jflex-setup">
    <dependset>
      <srcfileset dir="src" excludes="**/.*"
                  includes="com/admc/jcreole/*.grammar"/>
    <targetfileset file="tmp/derived-src/com/admc/jcreole/CreoleScanner.java"/>
    </dependset>
    <mkdir dir="tmp/derived-src"/>
    <jflex file="src/com/admc/jcreole/creole.flex" destdir="tmp/derived-src"
           verbose="${jflex.debug}" nobak="true" />
  </target>

  <target name="clean" description="Clean">
    <delete dir="test-reports"/>
    <delete dir="tmp/stage"/>
    <delete dir="dist"/>
    <delete dir="test-classes"/>
    <delete dir="classes"/>
    <delete dir="tmp/derived-src"/>
  </target>

  <target name="compile" description="compile Java sources" depends="jflex">
    <ivy:cachepath conf="build" pathid="build.ivyrefid"/>
    <mkdir dir="classes"/>
    <javac srcdir="tmp/derived-src:src"
           destdir="classes" classpathref="build.ivyrefid"
           source="${javac.sourceVersion}" target="${javac.targetVersion}"
           deprecation="${javac.deprecation}" debug="${javac.debug}">
      <!--
      <compilerarg value="-Xlint"/>
       -->
    </javac>
  </target>

  <target name="scan" description="run scanner" depends="compile, -run-init">
    <fail unless="creolepath" message="Property 'creolepath' is required"/>
    <ivy:cachepath conf="run" pathid="run.ivyrefid"/>
    <java classname="com.admc.jcreole.JFlexDriver" classpath="classes"
          classpathref="run.ivyrefid" failonerror="true">
      <arg value="${creolepath}"/>
      <sysproperty key="java.util.logging.config.file" value="${jul.cfgfile}"/>
    </java>
  </target>

  <target name="parse" description="run Beaver parser"
          depends="compile, -run-init">
    <fail unless="creolepath" message="Property 'creolepath' is required"/>
    <ivy:cachepath conf="run" pathid="run.ivyrefid"/>
    <java classname="com.admc.jcreole.JCreole" classpath="classes"
          classpathref="run.ivyrefid" failonerror="true">
      <arg value="-"/>
      <arg value="${creolepath}"/>
      <sysproperty key="java.util.logging.config.file" value="${jul.cfgfile}"/>
    </java>
  </target>

  <target name="jar" description="Build Jar deliverable" depends="compile">
    <ivy:cachepath conf="run" pathid="run.ivyrefid"/>
    <pathconvert property="jar.cp" pathsep=" " refid="run.ivyrefid"
                 setonempty="false">
      <mapper>
        <regexpmapper from=".*/(.*)" to="\1" handledirsep="true"/>
      </mapper>
    </pathconvert>
    <mkdir dir="dist"/>
    <property name="builder" value="${user.name}"/>
    <jar destfile="dist/${ant.project.name}-${version}.jar" filesonly="true"
         duplicate="fail" basedir="classes">
      <fileset dir="resources" excludes="**/.*"/>
      <manifest>
        <attribute name="Main-Class" value="com.admc.jcreole.JCreole"/>
        <attribute name="Class-Path" value="${jar.cp}"/>
        <attribute name="Specification-Title" value="Creole"/>
        <attribute name="Specification-Version" value="1.0"/>
        <attribute name="Specification-Vendor" value="WMS Workshop"/>
        <attribute name="Implementation-Title" value="JCreole"/>
        <attribute name="Implementation-Version" value="${version}"/>
        <attribute name="Implementation-Vendor" value="${builder}"/>
      </manifest>
      <metainf dir="doc" includes="LICENSE.txt"/>
    </jar>
  </target>

  <target name="html" description="Generate HTML" depends="stage, -run-init">
    <property name="htmlout.path" value="tmp/generated.html"/>
    <fail unless="creolepath" message="Property 'creolepath' is required"/>
    <ivy:cachepath conf="run" pathid="run.ivyrefid"/>
    <java jar="tmp/stage/jcreole-${version}.jar"
          classpathref="run.ivyrefid" failonerror="true" fork="true">
      <arg value="-o"/>
      <arg value="${htmlout.path}"/>
      <arg value="${creolepath}"/>
      <sysproperty key="java.util.logging.config.file" value="${jul.cfgfile}"/>
    </java>
    <echo>HTML written to '${htmlout.path}'.
If the document includes relative links, you'll need to
copy the resources accordingly.</echo>
  </target>

  <target name="constrain-tabs" description="Ensure no tabs in text files">
    <pathconvert property="tabbedFiles" pathsep=",">
      <fileset dir="test-data" excludes="**/.*"
               includes="**/*.css, **/*.js, **/*.jsp, **/*.html, **/*.creole">
        <contains text="&#9;"/>
      </fileset>
      <fileset dir="resources" excludes="**/.*"
               includes="**/*.css, **/*.js, **/*.jsp, **/*.html, **/*.creole">
        <contains text="&#9;"/>
      </fileset>
      <fileset dir="." excludes="**/.*" includes="*src/**, test-src/**, doc/**">
        <contains text="&#9;"/>
      </fileset>
    </pathconvert>
    <fail message="Files contain tabs: ${tabbedFiles}">
      <condition><not>
        <equals arg1="" arg2="${tabbedFiles}"/>
      </not></condition>
    </fail>
  </target>

  <target name="test-compile" description="compile Test sources"
          depends="compile">
    <ivy:cachepath conf="test" pathid="test.ivyrefid"/>
    <mkdir dir="test-classes"/>
    <javac srcdir="test-src" classpath="classes"
           destdir="test-classes" classpathref="test.ivyrefid"
           source="${javac.sourceVersion}" target="${javac.targetVersion}"
           deprecation="${javac.deprecation}" debug="${javac.debug}">
      <compilerarg value="-Xlint"/>
    </javac>
  </target>

  <target name="test" description="Execute unit tests" depends="test-compile">
    <!-- If add integration tests, then rename this target to "unittest" or
         similar, to make it distinctive. -->
    <ivy:cachepath conf="test" pathid="test.refid"/>
    <delete dir="test-reports"/>
    <delete dir="tmp/rawtestoutput"/>
    <mkdir dir="tmp/rawtestoutput"/>
    <junit printsummary="true" failureproperty="junit.failure">
      <!-- N.b. use failureproperty instead of haltonfailure, because if we use
           the former, we will get no detailed report about the failure.
           If the test fails, the fail element below will still assure that
           the Ant run will exit with error status.
      -->
      <classpath refid="test.refid"/>
      <classpath path="classes:test-classes"/>
      <batchtest todir="tmp/rawtestoutput">
        <fileset dir="test-classes" includes="**/*Test.class"/>
        <formatter type="xml"/>
      </batchtest>

      <!-- You can use sysproperty elements to pass configuration settings
           to your test classes, or to application classes they will run:
      <sysproperty key="targetserver.test" value="mercedes"/>
      -->
    </junit>
    <junitreport todir="tmp">
      <fileset dir="tmp/rawtestoutput"/>
      <report todir="test-reports"/>
    </junitreport>
    <fail if="junit.failure" message="Unit test(s) failed.  See reports!"/>
  </target>

  <target name="stage" depends="jar" description="Set up stage area">
    <delete dir="tmp/stage"/>
    <ivy:cachefileset conf="build" setid="bundle.refid"/>
    <copy todir="tmp/stage" flatten="true">
      <fileset refid="bundle.refid"/>
      <fileset file="dist/${ant.project.name}-${version}.jar"/>
    </copy>
  </target>

  <target name="serialver" depends="compile"
          description="generate Java serial version">
    <fail unless="className" message="Property 'className required"/>
    <ivy:cachefileset conf="build" setid="bundle.refid"/>
    <pathconvert property="cPath" refid="bundle.refid"/>
    <exec executable="serialver" failonerror="true">
      <arg value="-classpath"/>
      <arg value="classes${path.separator}${cPath}"/>
      <arg value="${className}"/>
    </exec>
  </target>

  <target name="dist" description="Build binary distribution zip file"
          depends="ref, condl-javadoc">
    <zip destfile="dist/${ant.project.name}-${version}.zip"
         filesonly="true" whenempty="fail">
      <zipfileset prefix="${ant.project.name}-${version}"
                  dir="tmp/stage" excludes="**/.*"/>
      <zipfileset prefix="${ant.project.name}-${version}"
                  dir="." excludes="**/.*" includes="doc/**"/>
      <zipfileset prefix="${ant.project.name}-${version}"
                  dir="dist" excludes="**/.*" includes="apidocs/**"/>
      <zipfileset prefix="${ant.project.name}-${version}/doc"
                  file="README.txt"/>
      <zipfileset prefix="${ant.project.name}-${version}/doc"
                  dir="tmp" includes="jcreole-ref.html"/>
    </zip>
  </target>

  <target name="src-dist" description="Build source distribution zip file"
          depends="condl-javadoc">
    <mkdir dir="dist"/>
    <zip destfile="dist/${ant.project.name}-${version}-src.zip"
         filesonly="true" whenempty="fail">
      <zipfileset prefix="${ant.project.name}-${version}"
                  dir="." excludes="**/.*" includes="
        app.properties, boot-libs/**, build.xml, ivy-projsetup.xml, ivy.xml,
        template-ivysettings.xml, README.txt, template*/**,
        resources/**, src/**, test-data/**, doc/**, *-src/**
      "/>
      <zipfileset prefix="${ant.project.name}-${version}"
                  dir="dist" excludes="**/.*" includes="apidocs/**"/>
    </zip>
  </target>

  <target name="condl-javadoc" unless="javadoc.skip"
          description="Generates the Java API if necessary">
    <dependset>
      <srcfileset dir="src" excludes="**/.*"/>
      <targetfileset dir="dist/apidocs"/>
    </dependset>
    <available file="dist/apidocs/index.html"
               type="file" property="javadoc.skip"/>
    <antcall target="javadoc"/>
  </target>

  <target name="javadoc" depends="jflex" unless="javadoc.skip"
          description="Generates the Java API documentation at 'dist/apidocs'">
    <ivy:cachepath conf="build" pathid="build.ivyrefid"/>
    <delete dir="dist/apidocs"/>
    <mkdir dir="dist/apidocs"/>
    <javadoc packagenames="com.admc.*"
             classpathref="build.ivyrefid"
             sourcepath="src:tmp/derived-src"
             docencoding="UTF-8"
             charset="UTF-8"
             destdir="dist/apidocs"
             author="true"
             version="true"
             public="true"
             use="true"
             failonerror="true"
             windowtitle="${ant.project.name} API, JCreole , v. ${version}"
             doctitle="${ant.project.name}"
             bottom="Apache 2.0 License">
      <link href="http://download.oracle.com/javaee/6/api/"/>
    </javadoc>
  </target>

  <target name="-run-init">
    <property name="jul.cfgfile" value="local-jul.properties"/>
    <available property="_julcfg.present" file="${jul.cfgfile}" type="file"/>
    <antcall target="-condl-mkjulcfg"/>
  </target>

  <target name="-condl-mkjulcfg" unless="_julcfg.present">
    <copy file="template-jul.properties" tofile="${jul.cfgfile}"/>
    <echo>Local logging cfg file created.  Edit per your needs:
    ${jul.cfgfile}</echo>
  </target>

  <target name="ref" description="Generate JCreole Reference doc"
          depends="stage, -run-init">
    <ivy:cachepath conf="run" pathid="run.ivyrefid"/>
    <java jar="tmp/stage/jcreole-${version}.jar"
          classpathref="run.ivyrefid" failonerror="true" fork="true">
      <arg value="-o"/>
      <arg value="tmp/jcreole-ref.html"/>
      <arg value="jcreole-ref.creole"/>
      <sysproperty key="java.util.logging.config.file" value="${jul.cfgfile}"/>
    </java>
    <echo message="HTML reference written to 'tmp/jcreole-ref.html'"/>
  </target>
</project>
