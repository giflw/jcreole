JCX = JCreole Extensions.  Implemented as Creole <<...>> plugin/extensions.


****************************************************************************
***   THESE FEATURES ARE NOT IMPLEMENTED YET!!!!
****************************************************************************
Coming soon!

Creole authors use extensions (aka plugins) by coding <<...>> elements in their Creole text.  

I call the individual <<X>> commands that are available "Plugin Directives".
(I don't call them "elements" in order to eliminate ambiguity because of the resemblance to XML Elements).


DESIGN

    Some (or possibly all) extensions are enabled/disabled at the Scanner
    instance level.  This can be used, for example, to prevent "comment"
    authors from altering style, or to only allow authorized users to pass
    through HTML directly.

    Still under consideration, but though I "could" allow for setting element
    IDs and HTML tag attributes, I think that purposefully not supporting
    operations targeted to single HTML elements will encourage general and
    re-usable layout management.
    
    As things are currently implemented, the user is forced to assign CSS
    classes.  If the user intends to use the class for just one element-- no
    harm done and it will work-- but the user may just find it useful that they
    can re-use that same class elsewhere in the page.  The <<@ element further
    encourages generalization further to use custom class names across
    multiple pages and even multiple web sites.

Definitions.  These special characters are used in various commands consistently
to denote the entities attributed to them here.

    [ = Normal (non-JCreole) block HTML tag (like H1, DIV)
    ( = Normal (non-JCreole) inline HTML tag (like I, SPAN)
    { = JCX-created SPAN tag:  <span class="jcx...

    As an example, the Styler command "<<+(className>>" operates on the next
    normal inline HTML tag.
    Combining this concept with -/=/+ for previous/current/next, we get, for
    example "-[" meaning the previous block tag, and "+{" meaning the next JCX
    tag.


Misc.
-----

Ids are automatically created for each heading.  (They can, of course, be
used externally and within the page like [#autoId] or [#autoId|label]).
A map is stored internally so that the default label for "[@autoId]" is the
text in that label (scraped of markup).


Plugin Directives by category
-----------------------------

In every case, white space (including newlines) is permitted between the opening
"<<" and the first non-whitespace character.

DIRECT HTML

    <<~...>> Direct HTML content.

    Even Nowiki does not let you enter HTML into a web page, because of the
    real danger of either unintentionally or intentionally invoking dynamic
    content, breaking HTML DOM structure, etc.  For example, if double-quotes
    are not escaped, there are many different ways that you could accidentally
    unbalance the quotes, easily effecting otherwise unrelated JavaScript (and
    depending on server-side technology integration, even server-side
    scripting).

    BEWARE that inside of <<~...>>, you are responsible for the consquences of
    missing the very strict requirements of CSS, HTML, JavaScript, or whatever
    you code in there.


CREATE ELEMENTS

    <<{>>  Open a new JCX SPAN element with '<span class="jcx">'.
    <<}>>  Close the previously opened SPAN with '</span>.

    You should obviously always pair <<(>>...<<)>> and <<{>>...<<}>>.


STYLERS:  ASSIGN A CSS CLASS TO A HTML ELEMENT

    <<=[className>>
        Add CSS class to the immediate containing non-JCX block element.
    <<=(className>>
        Add CSS class to the immediate containing non-JCX inline element.
    <<={className>>
        Add CSS class to the immediate containing JCX SPAN element.

    Same as above, but with "-" instead of "=".  Target the preceding closed
    element instead of the immediate containing element:

    <<-[className>>
        Add CSS class to the immediate containing non-JCX block element.
    <<-(className>>
        Add CSS class to the immediate containing non-JCX inline element.
    <<-{className>>
        Add CSS class to the immediate containing JCX SPAN element.

    Same as above, but with "+".  Target the next
    element instead of the immediate containing element:

    <<+[className>>
        Add CSS class to the immediate containing non-JCX block element.
    <<+(className>>
        Add CSS class to the immediate containing non-JCX inline element.
    <<+{className>>
        Add CSS class to the immediate containing JCX SPAN element.

    Note that <<- means the last previous element CLOSED, not the last element
    opened.  So, with nested "em" and "strong" elements, if we have
        //emphasized **strong** closing// <<-(aName)
    the name applies to the last incline CLOSED, which is <em> for the //.

Define CSS styles

    (Deferred until HTML 5:
        <<$ style line definitions...  >>  The aggregate of all <<$...>> element
        contents will be inserted inside one
            <style type="text/css" scoped="scoped">...</style>
        element (preserving sequence) before the generated HTML content.)

    <<@ CSS file path  >>  Link elements for all <<@...>> elements will be
    inserted inside the page head (preserving sequence).
    Each link tag will be of the form
        <link rel="stylesheet type="text/css" href="..." />

    CONSIDER  Allowing CSS style coding directly in a <<?...>> tag, which we
    would insert into a <link> element in the page head.
    I am thinking that it would encourage consistency more to force the user to
    upload a separate .css file and just reference that.
    

Comments

    <<# author comments... >>
    Your comment text may not include the string ">>".
    These contents will be entirely stripped.  I.e. they will not be visible as
    HTML comments, or in any other way, in the generated HTML.

    <<! HTML comments... >>
    Your comment text may not include the strings "--" or ">>".
    These will not be visible as HTML comments in the generated HTML.

TOC

    <<^>>
    (The character "^" is tentative.  Accepting suggestions.).
    Insert a little TOC table or list, with hyperlinks to all headings.

UNDER CONSIDERATION
    <<:IntraWikiLink>>
    Because plain IntraWikiLink is too susceptible to false positives.
