<<enumFormats x1a_xx>>

= JCreole Author Reference

<<toc reftoc>>

== Base Creole

All features listed in this section are available to all page authors.

See the [[http://wikicreole.org/wiki/Creole1.0|Creole 1.0 Spec]] for more
details about basic Crole directives and behavior.

=== Plain text
Plain text is grouped into (HTML) paragraphs.
Separate paragraphs with blank lines in the wikitext.
Paragraphs will automatically end without a blank like if you trigger a
list, paragraph, or heading as described below (though it won't hurt anything
if you add a blank line also).

=== Strong text
====== ~**Like this~**
**See?**

=== Emphasized text
======~//Like this~//
//See?//

=== Table rows
======|col1 content|col2 content|col3 content
Row lines must begin with the ##|## character.
Use | to separate each cell.
Add a ##=## immediately after the | to mark the cell as a heading cell
(as opposed to a data cell).
Note that These tables are not suitable for formatting purposes (as HTML tables
are), but only for displaying tabular data.

Without coding anything special, all content for a table row must be specified
on a single wikitext line, ~-- as you may imaging, that can be quite inconvenient.
To split a single table into multiple rows, you can end a row line with the tilde character ##~##, or use a [[#jcsect_JcxblockCreateCustomStylableBlockElement|jcxBlock]].
|=Looks|=Like|=this
|and|like|this
|and|like|this

=== Numbered list items
======#Like this
On lines beginning with one or more ##{{{#}}}## characters, where the number of #'s indicates the list level.
There is a constraint on the list item levels allowed.
The level (number of #'s) of a row line must be less than, equal to, or one level higher than the level of the row on the previous line.
Consequently, you must //start// numbered lists with a line starting with just one #.
#Looks like this
##And
##Like this

=== Unordered list items
======*Like this
Same as Numbered lists, but use ##*## characters instead of the # characters to
identify the rows and indicate levels.
*Looks like this
**And
**Like this

=== Headings
====== =Like this
Begin the line with from one to six ##=## characters.
One ##=## sign means a top-level ("h1" in HTML) heading, and ##======## meand a lowest-level heading.\\
(The line above that says "Headings" serves as an example).

=== Bare URLs
======~http://wikicreole.org/wiki/Creole1.0
Automatically made into hyperlinks with a label matching the URL.\\
~http://wikicreole.org/wiki/Creole1.0

=== Explicit hyperlinks
======{{{[[http://wikicreole.org/wiki/Creole1.0]]}}}
To show a label as something other than the URL, add a pipe character and the
label text right after the URL,
{{{[[http://wikicreole.org/wiki/Creole1.0|like this]]}}}.\\
Looks [[http://wikicreole.org/wiki/Creole1.0|like this]].

Inter- and intra- wiki links with colons are supported by JCrole, but require
application integration.
If your application has provided JCreole with a mapping function from wiki-link
to URL, these links will work.

=== Horizontal rules
======**{{{----}}} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;but on a line all by itself.
Looks like...
----

=== Inline images
======~{{this.png~}}
You can add alternate text for non-graphical page viewers\\
like **##~{{this.png|alternate text~}}##**\\
You embed the ##~{{...~}}## inside of a ##~[[link...~]]## to have the image hot
linked with a target URL,\\
Like **##{{{[[http://wikicreole.org/wiki/Creole1.0|{{http://upload.wikimedia.org/wikipedia/commons/a/af/Tux.png}}]]}}}##**\\
Looks like\\
[[http://wikicreole.org/wiki/Creole1.0|{{http://upload.wikimedia.org/wikipedia/commons/a/af/Tux.png|Alternate text}}]]

=== Avoid markup interpretation
By prefixing the special character(s) with ~, or by enclosing the text with
~{{{ and ~}}}.
These tactics are called //escaping//, and the last method is called //Nowiki//.
(Nowiki where ~{{{ and ~}}} are on separate lines with no blank space also
cause the enclosed, escaped text to be wrapped in a HTML //pre// element).\\
======{{{Works like this with <<>> __ \\ Special characters}}}.

Note that these methods escape Wikitext language interpretation, but do not
prevent changing your input to be //HTML safe// (such as translating ##>## to
##&amp;gt;##, etc.).
To avoid this level of translation you would need to use the [[#jcsect_RawHtml]]
directive.

=== Hard linebreaks
======~\\
Can use multiple to create blank lines.\\\\Looks like that.


== JCreole Additions

All features listed in this section are available to all page authors.

See the file ##additions.html## in the doc directory of JCreole distributions
for more complete descriptions.

=== Automatic id's to use as Hyperlink Targets
Take a look at the generated code and you will see id attributes written to all
of your heading elements.
You can use these as targets from ~[[...~]] links on the same page, as targets
from external pages, to use in CSS selectors, or for any other purpose.
(They are also used for the TOC feature described elsewhere).

=== Automatic Link Labels
======{{{[[#jcsect_PlainText]]}}}
If you don't supply a label, then labels are created automatically when you
write links to header/sections in the same page (these will begin with #).
(And also for inter-wiki links if your application supports that).
Note that we prefix the header link names that we create with ##jcsect_##,
to prevent naming collisions with your own content or third party products.\\
An auto-labelled link to the Plain text section looks like this:
[[#jcsect_PlainText]].

=== Character entities
======&amp;quot;
Just add named (not numerical) character entities and they will be preserved.\\
&quot;see?&quot;.

=== Hard spaces
======{{{~ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(That is a tilde followed by a space character).}}}
This is equivalent to writing ##&amp;nbsp;##.\\
Four such spaces looks like ~ ~ ~ ~ this.

=== Monospace fonts
======~##Like this~##
Since the HTML element "u" is deprecated, JCreole depends on the application
(or page author by using the [[#jcsect_StyleSheet]] directive) to make a CSS
class assignment like this:
{{{
  span.jcreole_underline { text-decoration: underline; }
}}}
Can you ##see?##

=== Superscript
======~^^Like this~^^
Regular ^^Super^^

=== Subscript
======~,,Like this~,,
Regular ,,Sub,,

=== Underline
======~__Like this~__
See the section below about [[#jcsect_Styling]].\\
__See?__

=== Overstrike
======~--Like this~--
See the section below about [[#jcsect_Styling]].\\
--See?--


== JCreole Extensions via ~<<...>> Plugin Directives

See the file ##extensions.html## in the doc directory of JCreole distributions
for more complete descriptions.

** Use of Plugin Directives is resticted.**
If you do not have the privilege needed to use a specific directive, you will
be given a precise message to that effect when you submit the wikitext.
Applications may also activate some plugin features without page author
involvement
(specifically, enumerating sections by default, and automatic generation and
display of table-of-contents).

=== Raw HTML
======{{{<<~Like this>>}}}
Code HTML right into your wikitext page.
This directive is usually restricted to users with special authorization.

=== jcxBlock: Create custom-stylable Block element
======{{{<<[>>>Like this<<]>>}}}
or\\
======{{{<<[cssClassName1 cssClassName2>>>Like this<<]>>}}}
You can assign CSS classes to your custom elements as shown by the second
sample here, or by using Styler directives as shown below.

Due to HTML syntax rules, you can not create a jcxBlock (or any HTML block
element) inside of a HTML paragraph.

<<[yellow>>Here is a sample that Colors a block yellow.<<]>>

=== jcxSpan: Create custom-stylable Inline element
======{{{<<{>>Like this<<}>>}}}
or\\
======{{{<<{cssClassName1 cssClassName2>>>Like this<<}>>}}}
You can assign CSS classes to your custom elements as shown by the second
sample here, or by using Styler directives as shown imediately below.

Here is a sample that <<{yellow>>colors some text yellow<<}>>.

=== Stylers:  Assign CSS classes to automatic or custom HTML elements.
{{{<<addClass =block className1 classname2>>}}}\\
or\\
{{{<<addClass =inline className1>>}}}\\
or\\
{{{<<addClass =jcxBlock className1 className2 className3>>}}}\\
or\\
{{{<<addClass =jcxSpan className1>>}}}\\
These samples show how to ass classes to immediate parent HTML block element,
HTML inline element, jcxBlock, or jcxSpan element.

{{{<<addClass -block className1 classname2>>}}}\\
Just change the ##=## to ##-## to add the class name to the //previous//
element which was closed.
This works for all 4 element types.

{{{<<addClass +block className1 classname2>>}}}\\
Just change the direction character to ##+## to add the class name to the
//next// element which was closed.
This works for all 4 element types.

A few HTLM elements can not be targets of stylers (i.e., you can not add
classes to them using Stylers).
Some elements are purposefully omitted because they make it more difficult to
target more important elements nearby (e.g. spans added for internal formatting
purposes and thead and tbody elements).
Elements added in a very late pass (only TOC-related elements AFAIK) can not be
targeted because the are not written until after the Stylers are applied.

<<addClass =block yellow>>
This is a sample that colors this HTML p element yellow.


=== Style sheet
======{{{<<styleSheet urlToFile.css>>}}}
CSS file links will be inserted into the HTML pages's head section.
You can use multiple styleSheet directives on a single page and the links will
be inserted in the correct order.

=== Author comments
======{{{<<#author comments>>}}}
Comments written this way never make it to the HTML page.

=== HTML comments
======{{{<<!HTML comments>>}}}
These comments can be seen by end-users who know how to view source HTML.

=== Section Enumeration
======{{{<<enumFormats A1a1_x>>}}}
By default, no headings/sections in the generated page will be enumerated.
The command above says to enumerate top-level (h1) headings like "A", "B',
"C",... and to level the second-level (h2) headings like "1", "2"...
This effects both headings in the main body and TOCs if you add any (see the
[[#jcsect_TocTableOfContents]] directive below).

You may only use one enumFormat directive on a single page, since there is only
one such setting for a page (and location of the directive doesn't matter).
The [[#jcsect_ResettingEnumerations|enumFormatReset]] and
[[#jcsect_TocTableOfContents|toc]] directives can be used to make
location-specific adjustments to the global page enumFormat.

See the file "extensions.txt" in the JCreole distribution for requirements and
meaning of the characters in the //enumationFormats// string ("A1a1_x" above).

=== Resetting Enumerations
======{{{<<enumFormatReset A>>}}}
Far easier to explain this with an example.
Assume we start a page out with numerical ("1") enumeration formatting and this:
{{{
    === First
    === Second
    === Third
    === Fourth <<enumFormatReset A>>
    === Fifth
}}}
The generated section enumerations will be "1", "2", "3", "A', "B".
Note that the reset both changed the enumeration formatting and reset the
sequence counting.
If you assign the same formatting that was already in use ("1" here), then the
only effect will be to reset the counting sequence.

===TOC: Table of Contents
======{{{<<toc>>}}}
or\\
======{{{<<toc className1>>}}}
or\\
======{{{<<toc /___xxx>>}}}
or\\
======{{{<<toc className1 className 2 /___xxx>>}}}
These samples all generate a table of contents listing at the location where
you code the directive~-- just like the one
[[#jcsect_JcreoleAuthorReference|at the top of this page]].
The first two samples will include/exclude sections and enumerations formatting per the page settings.
The last two samples specify section-inclusion/exclusion and enumeration formatting explicitly.
CSS classes must be specified in the TOC directive (as opposed to using Stylers) because Stylers can not effect TOCs (because the table of contents are generated after Stylers are applied).

You can include as many TOCs in a the page as you want to.
The Java API also has getters for obtaining both TOC HTML and the data
structures, so that you can write the TOC to a framing tile or header, using
either the pre-fab or building it yourself.

==Styling

If you have permissions to use the [[#jcsect_StyleSheet]] directive, then you
can customize the appearance and layout of the many un-classed elements that
JCreole generates.
If the JCreole content is integrated into a tile or framing system, then you
are advised to use CSS selectors to narrow your stylings to only the JCreole
content area.
The following CSS selectors are useful for targeting styles as described.

* **##div.jcreole##**  The entire block of JCreole-generated content.
* **##span.jcreole_underline##**  You (or your application) should normally
style this class as ##text-decoration:underline##.
* **##span.jcreole_orphanLink##**  You can infer the purpose.
* **##table.jcreole_data##**  Generated tables
* **##table.jcreole_even##**  Even numbered body rows of generated tables
* **##table.jcreole_odd##**  Odd numbered body rows of generated tables
* **##div.jcx##** [[#jcsect_JcxblockCreateCustomStylableBlockElement|jcxBlocks]].
* **##span.jcx##** [[#jcsect_JcxspanCreateCustomStylableInlineElement|jcxSpans]].
* **##div.jcx_toc##** HTML ##div## container for [[#jcsect_TocTableOfContents]].\\
Present whether table generated by programmatic calls or by toc directive.
* **##ul.jcx_toc##** HTML ##ul## container for [[#jcsect_TocTableOfContents]].\\
Present unless your application generates the TOC table HTML itself.
* **##span.jcreole_nowiki##**  Inline ~{{{...~}}} Nowiki as described in the
[[#jcsect_AvoidMarkupInterpretation]] section.
* **##span.jcx_enum##**  Section enumeration labels in body headers and in
table-of-contents (but the latter may be overridden with following class name).
This does style the &sect; character as well as the varying string.
If you want stylings to apply only to body heading tags, then narrow your
selectors with heading tag names.
* **##div.jcx_toc span.jcx_enum##**  Same as previous but only applies to
enumeration labels inside of table-of-contents, and only if the t-o-c HTML is
generated by JCreole (as opposed to by your application).
* **##span.jcreole_hbody  Heading tag text content.
Includes any section enumeration formatting (i.e., these elements include
jcx_enum spans, if any).
Narrow the selector with heading tag names for heading-level-specific styling.

Class names with the string "jcx" instead of "jcreole" are for management of
Plugin-specific functionalities.
For example, class names related to tables are prefixed with "jcreole_" since
tables are a basic Creole 1.0 feature;
but class names related to table-of-contents are prefixed with "jcx_" since
table-of-contents are impemented as a JCreole plugin and there is no such
feature in basic Creole.

As mentioned in the relevant sections above, by default JCreole generates no
section enumerations or table-of-contents, so setting the CSS classes for those
functions will have no effect if you or your application don't enable the
feature.
