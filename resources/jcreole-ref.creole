<<enumFormats x1a_xx>>

= JCreole Reference

<<toc>>

== Base Creole

See the [[http://wikicreole.org/wiki/Creole1.0|Creole 1.0 Spec]] for more
details about basic Crole directives and behavior.

=== Plain text
Plain text is grouped into (HTML) paragraphs.
Separate paragraphs with blank lines in the wikitext.
Paragraphs will automatically end without a blank like if you trigger a
list, paragraph, or heading as described below (though it won't hurt anything
if you add a blank line also).

=== Strong text
**##~**Like this~**##**\\
See the section below about [[#jcsect_Styling]].\\
**See?**

=== Emphasized text
**##~//Like this~//##**\\
See the section below about [[#jcsect_Styling]].\\
//See?//

=== Table rows
**##|col1 content|col2 content|col3 content##**\\
Row lines must begin with the ##|## character.
Use | to separate each cell.
Add a ##=## immediately after the | to mark the cell as a heading cell
(as opposed to a data cell).
Note that These tables are not suitable for formatting purposes (as HTML tables
are), but only for displaying tabular data.

Without coding anything special, all content for a table row must be specified
on a single wikitext line, ~-- as you may imaging, that can be quite inconvenient.
To split a single table into multiple rows, you can end a row line with the tilde character ##~##, or use a [[#jcsect_JcxblockCreateCustomStylableBlockElement|jcxBlock]].
|=Looks|=Like|=this
|and|like|this
|and|like|this

=== Numbered list items
**## #Like this##**\\
On lines beginning with one or more ##{{{#}}}## characters, where the number of #'s indicates the list level.
There is a constraint on the list item levels allowed.
The level (number of #'s) of a row line must be less than, equal to, or one level higher than the level of the row on the previous line.
Consequently, you must //start// numbered lists with a line starting with just one #.
#Looks like this
##And
##Like this

=== Unordered list items
**## *Like this##**\\
Same as Numbered lists, but use ##*## characters instead of the # characters to
identify the rows and indicate levels.
*Looks like this
**And
**Like this

=== Headings
**##=Like this##**\\
Begin the line with from one to six ##=## characters.
One ##=## sign means a top-level ("h1" in HTML) heading, and ##======## meand a lowest-level heading.\\
(The line above that says "Headings" serves as an example).

=== Bare URLs
Like **##~http://wikicreole.org/wiki/Creole1.0 ##**\\
Automatically made into hyperlinks with a label matching the URL.\\
~http://wikicreole.org/wiki/Creole1.0

=== Explicit hyperlinks
Like **##{{{[[http://wikicreole.org/wiki/Creole1.0]]}}}##**\\
To show a label as something other than the URL, add a pipe character and the
label text right after the URL, 
{{{[[http://wikicreole.org/wiki/Creole1.0|like this]]}}}.\\
Looks [[http://wikicreole.org/wiki/Creole1.0|like this]].

=== Horizontal rules
Like **{{{----}}}**, but on a line all by itself.\\
Looks like...
----

=== Inline images
Like **##~{{this.png~}}##**\\
You can add alternate text for non-graphical page viewers\\
like **##~{{this.png|alternate text~}}##**\\
You embed the ##~{{...~}}## inside of a ##~[[link...~]]## to have the image hot
linked with a target URL,\\
Like **##{{{[[http://wikicreole.org/wiki/Creole1.0|{{http://upload.wikimedia.org/wikipedia/commons/a/af/Tux.png}}]]}}}##**\\
Looks like\\
[[http://wikicreole.org/wiki/Creole1.0|{{http://upload.wikimedia.org/wikipedia/commons/a/af/Tux.png|Alternate text}}]]

=== Avoid markup interpretation
By prefixing the special character(s) with ~, or by enclosing the text with
~{{{ and ~}}}.
These tactics are called //escaping//, and the last method is called //Nowiki//.
(Nowiki where ~{{{ and ~}}} are on separate lines with no blank space also
cause the enclosed, escaped text to be wrapped in a HTML //pre// element).\\
Works {{{like this with <<>> __ \\ Special characters}}}.

Note that these methods escape Wikitext language interpretation, but do not
prevent changing your input to be //HTML safe// (such as translating ##>## to
##&amp;gt;##, etc.).
To avoid this level of translation you would need to use the [[#jcsect_RawHtml]]
directive.

=== Hard linebreaks
Like **##~\\##**\\
Can use multiple to create blank lines.\\\\Looks like that.


== JCreole Additions

See the file ##additions.html## in the doc directory of JCreole distributions
for more complete descriptions.

=== Automatic id's to use as Hyperlink Targets
Take a look at the generated code and you will see id attributes written to all
of your heading elements.
You can use these as targets from ~[[...~]] links on the same page, as targets
from external pages, to use in CSS selectors, or for any other purpose.
(They are also used for the TOC feature described elsewhere).

=== Automatic Link Labels
**##{{{[[#jcsect_PlainText]]}}}##**\\
Links are created automatically when you write intra-page links.
Note that we prefix all of these header link names with ##jcsect_##, to prevent
naming collisions with your own content or third party products.\\
An auto-labelled link to the Plain text section looks like this:
[[#jcsect_PlainText]].

=== Character entities
**##&amp;quot;##**\\
Just add named (not numerical) character entities and they will be preserved.\\
&quot;see?&quot;.

=== Hard spaces
Like**##~~ ##**this\\
(That is a tilde followed by a space character).\\
This is equivalent to writing ##&amp;nbsp;##.\\
Four such spaces looks like ~ ~ ~ ~ this.

=== Monospace fonts
**##~##Like this~## ##**\\
See the section below about [[#jcsect_Styling]].\\
Can you ##see?##

=== Superscript
**##~^^Like this~^^##**\\
Regular ^^Super^^

=== Subscript
**##~,,Like this~,,##**\\
Regular ,,Sub,,

=== Underline
**##~__Like this~__##**\\
See the section below about [[#jcsect_Styling]].\\
__See?__

=== Overstrike
**##~--Like this~--##**\\
See the section below about [[#jcsect_Styling]].\\
--See?--


== JCreole Extensions via ~<<...>> Plugin Directives

See the file ##extensions.html## in the doc directory of JCreole distributions
for more complete descriptions.

** Use of Plugin Directives is resticted.**
If you do not have the privilege needed to use a specific directive, you will
get given a precise message to that effect when you submit the wikitext.

=== Raw HTML
**##{{{<<~...>>}}}##**\\
Code HTML right into your wikitext page.
This directive is usually restricted to users with special authorization.

=== jcxBlock: Create custom-stylable Block element
**##{{{<<[>>> ... <<]>>}}}##**\\
or\\
**##{{{<<[cssClassName1 cssClassName2>>> ... <<]>>}}}##**\\
You can assign CSS classes to your custom elements as shown by the second
sample here, or by using Styler directives as shown below.

Due to HTML syntax rules, you can not create a jcxBlock (or any HTML block
element) inside of a HTML paragraph.

<<[yellow>>Here is a sample that Colors a block yellow.<<]>>

=== jcxSpan: Create custom-stylable Inline element
**##{{{<<{>> ... <<}>>}}}##**\\
or\\
**##{{{<<{cssClassName1 cssClassName2>>> ... <<}>>}}}##**\\
You can assign CSS classes to your custom elements as shown by the second
sample here, or by using Styler directives as shown imediately below.

Here is a sample that <<{yellow>>colors some text yellow<<}>>.

=== Stylers:  Assign CSS classes to automatic or custom HTML elements.
**##{{{<<addClass =block className1 classname2>>}}}##**\\
or\\
**##{{{<<addClass =inline className1>>}}}##**\\
or\\
**##{{{<<addClass =jcxBlock className1 className2 className3>>}}}##**\\
or\\
**##{{{<<addClass =jcxSpan className1>>}}}##**\\
These samples show how to ass classes to immediate parent HTML block element,
HTML inline element, jcxBlock, or jcxSpan element.

**##{{{<<addClass -block className1 classname2>>}}}##**\\
Just change the ##=## to ##-## to add the class name to the //previous//
element which was closed.
This works for all 4 element types.

**##{{{<<addClass +block className1 classname2>>}}}##**\\
Just change the direction character to ##+## to add the class name to the
//next// element which was closed.
This works for all 4 element types.

<<addClass =block yellow>>
This is a sample that colors this HTML p element yellow.


=== Style sheets
**##{{{styleSheet urlToFile.css}}}##**\\
CSS file links will be inserted into the HTML pages's head section.

=== Author comments
**##{{{<<# author comments>>}}}##**\\
Comments written this way never make it to the HTML page.

=== HTML comments
**##{{{<<! HTML comments>>}}}##**\\
These comments can be seen by end-users who know how to view source HTML.

=== Section Enumeration
**##{{{<<enumFormats A1a1_x>>}}}##**\\
By default, no headings/sections in the generated page will be enumerated.
The command above says to enumerate top-level (h1) headings like "A", "B',
"C",... and to level the second-level (h2) headings like "1", "2"...
This effects both headings in the main body and TOCs if you add any (see the
[[#jcsect_TocTableOfContents]] directive below).

See the file "extensions.txt" in the JCreole distribution for requirements and
meaning of the characters in the //enumationFormats// string ("A1a1_x" above).

=== Resetting Enumerations
**##{{{<<enumFormatReset A>>}}}##**\\
Far easier to explain this with an example.
Assume we start a page out with numerical ("1") enumeration formatting and this:
{{{
    === First
    === Second
    === Third
    === Fourth <<enumFormatReset A>>
    === Fifth
}}}
The generated section enumerations will be "1", "2", "3", "A', "B".
Note that the reset both changed the enumeration formatting and reset the
sequence counting.
If you assign the same formatting that was already in use ("1" here), then the
only effect will be to reset the counting sequence.

===TOC: Table of Contents
**##{{{toc}}}##**\\
or\\
**##{{{toc ___xxx}}}##**\\
These directives both generate a table of contents listing at the location where
you code the directive~-- just like the one
[[#jcsect_JcreoleReference|at the top of this page]].
The first will include/exclude sections and enumerations formatting per the
page settings.
The second specifies section-inclusion/exclusion and enumeration formatting
explicitly.

You can include as many TOCs in a the page as you want to.
The Java API also has getters for obtaining both TOC HTML and the data
structures, so that you can write the TOC to a framing tile or header, using
either the pre-fab or building it yourself.

==Styling

===Styles used for font presentation settings
To generate the best and most modern HTML, with a maximum separation between
content and presentation, we have not followed the Creole 1.0 specification's
//recommendation// to translate the corresponding directives to the HTML
elements <strong>, <em>, <tt>, <del>, and <u>.
Instead, we translate all of these directives to HTML "span"s with the following CSS
class names:  ##jcreole_strong jcroele_em jcreole_monospace jcreole_strike
jcreole_underline##.

Your generated pages will appear to entirely ignore the correspojnding
directives unless your HTML page defines the CSS classes listed.
The provided sample boilerplate defines them as
{{{
  span.jcx_seqLabel { font-weight:bold; font-family:serif; }
  span.jcreole_strike { text-decoration: line-through; }
  span.jcreole_underline { text-decoration: underline; }
  span.jcreole_em { font-style: italic; }
  span.jcreole_strong { font-weight: bold; }
  span.jcreole_monospace { font-family: monospace; }
}}}
And that is what gets used by default if you execute the jcreole jar file or
the ##JCreole## class from the command line.
You are welcome to copy this stanza into your own style sheet, boilerplate,
or whatever HTML framing or inclusion you use when wrapping your JCreole-ized
content.

===Other styles you can leverage with JCreole
Besides the many un-classed elementst that JCreole writes, you can precisely
style...
* **span.jcx_seqLabel**  Enumeration prefixes in table of contents.\\
Will have no effect unless you set enumeration formatting.
* **span.jcreole_orphanlink**  You can infer the purpose.
* **table.jcreole_data**  Generated tables
* **table.jcreole_even**  Even numbered body rows of generated tables
* **table.jcreole_odd**  Odd numbered body rows of generated tables
* **div.jcx** [[#jcsect_JcxblockCreateCustomStylableBlockElement|jcxBlocks]].
* **span.jcx** [[#jcsect_JcxspanCreateCustomStylableInlineElement|jcxSpans]].
* **div.toc** Div container for [[#jcsect_TocTableOfContents]].
* **span.jcreole_pref**  Inline ~{{{...~}}} Nowiki as described in the
[[#jcsect_AvoidMarkupInterpretation]] section.

===Styling Strategies
You definitley do want to set your CSS styles.
Web pages without CSS style settings, whether JCreole-generated or not, will
look like crap without at least minimal settings.
H1 and H2 elements are obnoxiously obtrusive without styling adjustments, and
tables are feeble and sikly.
Most integrators will want to centralize their settings, and the JCreole
boilerplate mechanism and/or the [[#jcsect_StyleSheets]] directive facilitate
this.
