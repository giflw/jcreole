<<!
  This is the official JCreole Author Reference.
  Apache 2 Copyright 2011 by Axis Data Management Corp.
  Details at http://admc.com/jcreole

  Application integrators are welcome to serve the pre-built HTML version of
  this document, or to pre-build or dynamically serve their own version to
  constrain privileges and decorate so as to match the embedding application.
>>

<<enumFormats x1a_xx>>

= JCreole Author Reference

<<toc reftoc/x0a_xx>>

== Base Creole

All features listed in this section are available to all page authors.

See the [[&http://wiki.wikicreole.org/Creole%201.0|Creole 1.0 Spec]] for more
details about basic Creole directives and behavior.

=== Plain text
Plain text is grouped into (HTML) paragraphs.
Separate paragraphs with blank lines in the wikitext.
Paragraphs will automatically end without a blank like if you trigger a
list, paragraph, or heading as described below (though it won't hurt anything
if you add a blank line also).

=== Strong text
====== ~**Like this~**
**See?**

=== Emphasized text
======~//Like this~//
//See?//

=== Table rows
======|col1 content|col2 content|col3 content
Row lines must begin with the ##|## character.
Use | to separate each cell.
Add a ##=## immediately after the | to mark the cell as a heading cell
(as opposed to a data cell).
Note that These tables are not suitable for formatting purposes (as HTML tables
are), but only for displaying tabular data.

Without coding anything special, all content for a table row must be specified
on a single wikitext line--- as you may imagine, that can be quite inconvenient.
To split a single table into multiple rows, you can end a row line with the tilde character ##~##, or use a [[#jcsect_JcxblockCreateCustomStylableBlockElement|jcxBlock]].
|=Looks|=Like|=this
|and|like|this
|and|like|this

=== Numbered list items
======#Like this
On lines beginning with one or more ##{{{#}}}## characters, where the number of #'s indicates the list level.
There is a constraint on the list item levels allowed.
The level (number of #'s) of a row line must be less than, equal to, or one level higher than the level of the row on the previous line.
Consequently, you must //start// numbered lists with a line starting with just one #.
#Looks like this
##And
##Like this

=== Unordered list items
======*Like this
Same as Numbered lists, but use ##*## characters instead of the # characters to
identify the rows and indicate levels.
*Looks like this
**And
**Like this

=== Headings
====== =Like this
Begin the line with from one to six ##=## characters.
One ##=## sign means a top-level ("h1" in HTML) heading, and ##======## means a lowest-level heading.\\
(The line above that says "Headings" serves as an example).

=== Bare URLs
======~http://wiki.wikicreole.org/Creole%201.0
Automatically made into hyperlinks with a label matching the URL.\\
~http://wiki.wikicreole.org/Creole%201.0

To prevent link-generation, add a tilde (##~##) right before an URL, like
{{{~http://wiki.wikicreole.org/Creole%201.0}}} .

=== Explicit hyperlinks
======{{{[[http://wiki.wikicreole.org/Creole%201.0]]}}}
To show a label as something other than the URL, add a pipe character and the
label text right after the URL,
{{{[[http://wiki.wikicreole.org/Creole%201.0|like this]]}}}.\\
Looks [[http://wiki.wikicreole.org/Creole%201.0|like this]].

Also see the Jcreole-specific [[#jcsect_PopupLinks]] and
[[#jcsect_TargetedLinks]] enhancements to explicit hyperlinks.

Inter- and intra- wiki links with colons are supported by JCreole, but require
application integration.
If your application has provided JCreole with a mapping function from wiki-link
to URL, these links will work.
You can end your Inter- and Intra- wiki references with query strings or #
anchors and the suffixes be preserved and honored.

=== Horizontal rules
======**{{{----}}} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;but on a line all by itself.
Looks like...
----

=== Inline images
======~{{this.png~}}
You can add alternate text for non-graphical page viewers\\
like **##~{{this.png|alternate text~}}##**\\
You embed the ##~{{...~}}## inside of a ##~[[link...]]## to have the image hot
linked with a target URL,\\
Like **##{{{[[http://wiki.wikicreole.org/Creole%201.0|{{http://upload.wikimedia.org/wikipedia/commons/a/af/Tux.png}}]]}}}##**\\
Looks like\\
[[http://wiki.wikicreole.org/Creole%201.0|{{http://upload.wikimedia.org/wikipedia/commons/a/af/Tux.png|Alternate text}}]]

=== Preventing markup interpretation
...by prefixing the special character(s) with ~, or by enclosing the text with
~{{{ and ~}}}.
These tactics are called //escaping//, and the last method is called //Nowiki//.
(Nowiki where ~{{{ and ~}}} are on separate lines with no blank space also
cause the enclosed, escaped text to be wrapped in a HTML //pre// element).\\
======{{{Works like this with <<>> __ \\ Special characters}}}.

~ normally escapes just the special markup character following it.
An exceptional usage of ~ is that you can prefix an entire URL with ~ to
prevent bare-URL linking.

See the [[#jcsect_EmDash]] section about escaping hyphens.

Note that these methods escape Wikitext language interpretation, but do not
prevent changing your input to be //HTML safe// (such as translating "##>##" to
"##&amp;gt;##", etc.).
To avoid this level of translation you would need to use the [[#jcsect_RawHtml]]
directive.

=== Hard linebreaks
======~\\
Can use multiple to create blank lines.\\\\Looks like that.


== JCreole Additions

All features listed in this section are available to all page authors.

See the file ##additions.html## in the doc directory of JCreole distributions
for more complete descriptions.

=== Automatic id's to use as Hyperlink Targets
Take a look at the generated code and you will see id attributes written to all
of your heading elements.
You can use these as targets from ~[[...]] links on the same page, as targets
from external pages, to use in CSS selectors, or for any other purpose.
(They are also used for the TOC feature described elsewhere).

=== Automatic Link Labels
======{{{[[#jcsect_PlainText]]}}}
If you don't supply a label, then labels are created automatically when you
write links to header/sections in the same page (these will begin with #).
(And also for inter-wiki links if your application supports that).
Note that we prefix the header link names that we create with ##jcsect_##,
to prevent naming collisions with your own content or third party products.\\
An auto-labeled link to the Plain text section looks like this:
[[#jcsect_PlainText]].

=== Character entities
======&amp;quot;
Just add named (not numerical) character entities and they will be preserved.\\
&quot;see?&quot;.

=== Hard spaces
======{{{~ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(That is a tilde followed by a space character).}}}
This is equivalent to writing ##&amp;nbsp;##.\\
Four such spaces looks like ~ ~ ~ ~ this.

=== Monospace fonts
======~##Like this~##
Since the HTML element "u" is deprecated, JCreole depends on the application
(or page author by using the [[#jcsect_StyleSheet]] directive) to make a CSS
class assignment like this:
{{{
  span.jcreole_underline { text-decoration: underline; }
}}}
Can you ##see?##

=== Superscript
======~^^Like this~^^
Regular ^^Super^^

=== Subscript
======~,,Like this~,,
Regular ,,Sub,,

=== Underline
======~__Like this~__
See the section below about [[#jcsect_Styling]].\\
__See?__

=== Overstrike
======~--Like this~--
See the section below about [[#jcsect_Styling]].\\
--See?--

=== EM Dash
======Like {{{---}}}
An //EM Dash// is a single long hyphen.
If you write ~--, that would not generate two hyphens, but would trigger
overstrike, due to the [[#jcsect_Overstrike]] directive.
You can avoid the Overstrike directive by writing {{{~-}}}, but I recommend the
fancier EM Dash, {{{---}}}, which looks like...\\
This---

=== Headed List Items
======#=Like|this
or
======*Like|this
//This feature is JCreole-specific, but it is designed so as to degrade gracefully
if using another Creole engine.

This feature is a generalization paralleling table's "##|=##" option.
By suffixing the leading heading directive with "##=##", like "##~***=##", you
 instruct JCreole to divide the list item into a heading segment and a data
 (non-heading) segment.
 The first pipe character, "##|##", in your content specifies where the heading
 ends and the data starts, in the same way as | delimits table cells.

CSS styling can be used to easily display headed list items consistently and
meaningfully, for example by displaying the data intended on a separate line.
The JCreole-supplied sample styles just bold and monospace the heading and
separate it from the data with white space.

If you submit this to a Creole engine other than JCreole, it will not know
about the special usage of ##=## and ##|## here, so that another Creole engine
would display an input line of "##{{{#=Like|this}}} as a list item with content
"##=Like|this##", but JCreole will make it look...
#=Like|this

=== Definition List
======;Definiendum like this:And definiens like this

The first colon separates the definiendum from the definiens.
Definition Lists are similar to numbered and un-numbered lists in several points
# "##;##" must be the first thing on a line to indicate the start of a
 Definition List item
# You define multiple Definition List items one after the other and they are
 automatically displayed in a single Definition List.
# Each Definition List item specification may span multiple lines (with the
 first line necessarily beginning with "##;##").
# The current Definition List item, and the aggregate Definition List will
 terminate upon a blank Creole line or block type directive (such as a
 numbered or un-numbered list, horizontal line, table row).

Definition Lists are not as powerful as lists though (and are even less powerful
 than the HTML DL+DT+DD elements that render them, due to the rather limp
 Creole specification for this directive).
 Each list item may have no more than one definiendum
 and one definiens; and the lists and items may not nest at all.

;A Definition list item
:Looks like this
;And:like this

=== Popup Links

======~[["Like"|this]]
Popups up a message.

This requires simple application integration (at least a one-line JavaScript
 function definition), and the page author needs a specific privilege.
This is exactly the same as [[#jcsect_ExplicitHyperlinks]] with double-quoted
URL and specified label.

[["The
message"|Click to see]]


=== Targeted Links

======~[[&~http://wiki.wikicreole.org/Creole%201.0]]
or\\
======~[[&~http://wiki.wikicreole.org/Creole%201.0|Label here]]
Same as a regular link, with or without explicit label, but targets the page
display to a new browser window (or tab, depending on your web browser and
settings).
I.e. the new web page will open elsewhere and not replace the current page.

Usage of this feature requires a specific page author privilege.

[[&http://wiki.wikicreole.org/Creole%201.0|Click to see]]


== JCreole Extensions via ~<<...>> Plugin Directives

See the file ##extensions.html## in the doc directory of JCreole distributions
for more complete descriptions.

** Use of Plugin Directives is restricted.**
If you do not have the privilege needed to use a specific directive, you will
be given a precise message to that effect when you submit the wikitext.
Applications may also activate some plugin features without page author
involvement
(specifically, enumerating sections by default, and automatic generation and
display of table-of-contents).

=== Raw HTML
======{{{<<~Like this>>}}}
Code HTML right into your wikitext page.
This directive is usually restricted to users with a special authorization.

=== jcxBlock: Create custom-stylable Block element
======{{{<<[>>>Like this<<]>>}}}
or\\
======{{{<<[cssClassName1 cssClassName2>>>Like this<<]>>}}}
You can assign CSS classes to your custom elements as shown by the second
sample here, or by using Styler directives as shown below.

Due to HTML syntax rules, you can not create a jcxBlock (or any HTML block
element) inside of a HTML paragraph.

<<[yellow>>Here is a sample that Colors a block yellow.<<]>>

=== jcxSpan: Create custom-stylable Inline element
======{{{<<{>>Like this<<}>>}}}
or\\
======{{{<<{cssClassName1 cssClassName2>>>Like this<<}>>}}}
You can assign CSS classes to your custom elements as shown by the second
sample here, or by using Styler directives as shown immediately below.

Here is a sample that <<{yellow>>colors some text yellow<<}>>.

=== Stylers:  Assign CSS classes to automatic or custom HTML elements.
{{{<<addClass =block className1 classname2>>}}}\\
or\\
{{{<<addClass =inline className1>>}}}\\
or\\
{{{<<addClass =jcxBlock className1 className2 className3>>}}}\\
or\\
{{{<<addClass =jcxSpan className1>>}}}\\
These samples show how to ass classes to immediate parent HTML block element,
HTML inline element, jcxBlock, or jcxSpan element.

{{{<<addClass -block className1 classname2>>}}}\\
Just change the ##=## to ##-## to add the class name to the //previous//
element which was closed.
This works for all 4 element types.

{{{<<addClass +block className1 classname2>>}}}\\
Just change the direction character to ##+## to add the class name to the
//next// element which was closed.
This works for all 4 element types.

A few HTLM elements can not be targets of stylers (i.e., you can not add
classes to them using Stylers).
Some elements are purposefully omitted because they make it more difficult to
target more important elements nearby (e.g. spans added for internal formatting
purposes and thead and tbody elements).
Elements added in a very late pass (only TOC-related elements AFAIK) can not be
targeted because the are not written until after the Stylers are applied.

<<addClass =block yellow>>
This is a sample that colors this HTML p element yellow.


=== Style sheet
======{{{<<styleSheet urlToFile.css>>}}}
CSS file links will be inserted into the HTML pages's head section.
You can use multiple styleSheet directives on a single page and the links will
be inserted in the correct order.

This plugin requires application integration to insert into the framing HTML
page.
If you have permission to use this directive, then that should all be taken
care of.

To make it clear that ##styleSheet## directives are in no way a //part// of
any other element (like a paragraph, list, or table), each ##styleSheet##
directive must be placed on a line by itself.

=== Author comments
======{{{<<#author comments>>}}}
Comments written this way never make it to the HTML page.

=== HTML comments
======{{{<<!HTML comments>>}}}
These comments can be seen by end-users who know how to view source HTML.

=== Section Enumeration
======{{{<<enumFormats A1a1_x>>}}}
By default, no headings/sections in the generated page will be enumerated.
The command above says to enumerate top-level (h1) headings like "A", "B',
"C",... and to level the second-level (h2) headings like "1", "2"...
This effects both headings in the main body and TOCs if you add any (see the
[[#jcsect_TocTableOfContents]] directive below).

You may only use one enumFormat directive on a single page, since there is only
one such setting for a page (and location of the directive doesn't matter).
The [[#jcsect_ResettingEnumerations|enumFormatReset]] and
[[#jcsect_TocTableOfContents|toc]] directives can be used to make
location-specific adjustments to the global page enumFormat.
To make it clear that a ##styleSheet## directive are in no way a //part// of
any other element, it must be placed on a line by itself.

See the [[#jcsect_EnumerationFormats]] section below about the
meaning of the characters in the //enumationFormats// string ("A1a1_x" above).

=== Resetting Enumerations
======{{{<<enumFormatReset A>>}}}
Far easier to explain this with an example.
Assume we start a page out with numerical ("1") enumeration formatting and this:
{{{
    === First
    === Second
    === Third
    === Fourth <<enumFormatReset A>>
    === Fifth
}}}
The generated section enumerations will be "1", "2", "3", "A', "B".
Note that the reset both changed the enumeration formatting and reset the
sequence counting.
If you assign the same formatting that was already in use ("1" here), then the
only effect will be to reset the counting sequence.

===TOC: Table of Contents
======{{{<<toc>>}}}
or\\
======{{{<<toc className1>>}}}
or\\
======{{{<<toc /___xxx>>}}}
or\\
======{{{<<toc className1 className 2 /___xxx>>}}}
These samples all generate a table of contents listing at the location where
you code the directive--- just like the one
[[#jcsect_JcreoleAuthorReference|at the top of this page]].
The first two samples will include/exclude sections and enumerations formatting per the page settings.
The last two samples specify section-inclusion explicitly.
CSS classes must be specified in the TOC directive (as opposed to using Stylers) because Stylers can not effect TOCs (because the table of contents are generated by a pass after Stylers are applied).

See the [[#jcsect_EnumerationFormats]] section below about the
meaning of the characters in the //section-inclusion string//
("{{{___xxx}}}" above).

You can include as many table-of-contents in a page as you want to.
The Java API also has getters for obtaining both TOC HTML and the data
structures, so that applications can write the TOC to a framing tile or header,
either using a pre-fab or building it manually.

To make it clear that ##toc## directives are in no way a //part// of
any other element (like a paragraph, list, or table), each ##toc##
directive must be placed on a line by itself.

===Footnotes

Add references~<<footNote yourEntryName>> like this, and write the footnote
entries in paragraphs...

~<<footNoteEntry yourEntryName>>Like this.
The paragraph may contain any regular paragraph markup, excepting
footnote, master list, and index Directives.
For reference or bibliography entries, you will often want to use 
[[#jcsect_ExplicitHyperlinks]].

Then finally, where you want the footnote entries to appear in the document,
add...

======{{{<<footNotes>>}}}
or\\
======{{{<<footNotes className1>>}}}
or\\
======{{{<<footNotes /DEF_ORDER>>}}}
or\\
======{{{<<footNotes className1 className 2 /DEF_ORDER>>}}}

Just use "##~<<footNotes>>##" for the default footnotes layout.
"##DEF_ORDER##" specifies to list the footnotes in the sequence that the
footnotes were written (with ##footNoteEntry##s), instead of the default
order (##REF_ORDER##, the order of the first reference to each footnote in
the main document body).

The sequence of all of the 3 directives (##footNote##, ##footNoteEntry##,
and ##footNotes##) makes no difference.
Write them in whatever order is easiest or best for you to organize your
document.

The reference names, ##yourEntryName## in the examples above, are arbitrary.
Though they do not appear in the generated document at all, they serve an
important purpose.
They allow multiple references (##footNote## directives) to point to a single
footnote entry.
Since you can use any names that you want to, you can use names that remind you
of what the entry is for, are easy to remember, and are easy to type.
For example, if you have a footnote entry listing your source documents for
genetic inheritance details, you could name that entry something like
//genetic-inheritance-sourcedocs// or //inheritance-src//, depending on your
compromise between conciseness and descriptiveness.

//If you click on a footnote link (superscripted digit) and the footnote text
is not displayed in a pop-up, then this reference document was built in standalone mode.
In that case, your browser will scroll to the target location in the document.

==== Full Footnotes Sample

<<footNoteEntry secondEntry>>Second sample entry.
Notice that even though I have written this entry first, it will be second in
the list of entries because it is //referenced// second.

Main body text paragraph here, with the first reference<<footNote firstEntry>>
and a second reference<<footNote secondEntry>>.
And to show that multiple references to a shared entry work, here's a second
ref to the first entry<<footNote firstEntry>>.

<<footNoteEntry firstEntry>>First sample entry.

=====Sample Footnotes Document Section
Note that though you will usually want to insert the footnote entry listing at
the end of your document, it's awful useful for special cases like this one, to
be able to place it wherever you want to.
<<footNotes>>

=== Index
Mark entries in the document body ~<<(>>like this~<<)>> and
like this~<<indexEntry Entry name>>.

Then where you want the index to appear in the document, add...

======{{{<<index>>}}}
or\\
======{{{<<index className1>>}}}
or\\
======{{{<<index /REF_ORDER>>}}}
or\\
======{{{<<index className1 className 2 /NAME_BY_JAVA>>}}}

Just use "##~<<index>>##" for the default index layout.
"##REF_ORDER##" or "##NAME_BY_JAVA##" specify to display the index entries
sorted by reference order or by Java collation of the heading text, instead of
by the default dictionary sorting of the heading text.

Mark targets of index entries in the main document body using these two methods.
#When you want the index entry heading to be exactly the same as the target text
in the document body, mark the entry by surrounding the target text with
"##~<<(>>##"... "##~<<)>>##" directives.
#When you do not want the index entry heading to be exactly the same as
text in the document body, add a single "##~<<indexEntry...>>##" Directive with
parameter of exactly what the text of the index entry heading will be.

For the first method, enclose just the target text, not markup, or the markup
characters may appear in the generated heading.
If you don't want to deal with that, then just use the second method.

==== Full Index Sample

Main body text paragraph here, with the first index target<<indexEntry first  Entry>>
and a second index target<<indexEntry secondEntry>>.
And to show that multiple index targets for a shared entry work, here's a second
target for the first entry<<indexEntry first  Entry>>.

Another paragraph with <<(>>two instances<<)>> of index targets.  Here's a third target for the multi-entry <<(>> first  Entry  <<)>>.

=====Sample Index Document Section
Note that though you will usually want to insert the index at
the end of your document, it's awful useful for special cases like this one, to
be able to place it wherever you want to.
<<index>>

===Master Definition List

Add ~[[entryName|explicitly labelled reference]]s or automatically labelled
references like this: ~[[entryName]].
And write the definition list entries in paragraphs...

~<<masterDefEntry yourEntryName>>Like this.
The paragraph may contain any regular paragraph markup, excepting
footnote, glossary, and index Directives.
Then finally, where you want the definition entries to appear in the document,
add...

======{{{<<masterDefList>>}}}
or\\
======{{{<<masterDefList className1>>}}}
or\\
======{{{<<masterDefList /REF_ORDER>>}}}
or\\
======{{{<<masterDefList className1 className 2 /NAME_BY_JAVA>>}}}

Just use "##~<<masterDefList>>##" for the default list layout.
"##REF_ORDER##" or "##NAME_BY_JAVA##" above are samples of (optional)
specification for ordering of the list entries.
The supported values are
*=NAME_BY_DICTIONARY|Definienda are sorted with dictionary collation. **
 This is the default setting.**
*=NAME_BY_JAVA|Same as NAME_BY_DICTIONARY except Java collation is used.
*=DEF_ORDER|List is displayed in the same exact order as you authored the
 entries (i.e. the order of your ##masterDefEntry## directives).
*=REF_ORDER|List is displayed in the order of the first reference to each one
 in the main document body.

A Master Definition List is a generalization of a glossary.
One Creole document can have only one master definition file (hence //master//).
Add definitions for any words, terms, phrases, or whatever you want to
explicitly define for your audience.

Notice that you write links to definition entries as
[[#jcsect_ExplicitHyperlinks]].
Each explicit hyperlink in your document with a relative URL (i.e.
not #localAnchor URL and not absolute URL and not wiki:link) is checked against
all def list entries.
If the URL matches a master definition list entry name, then it is linked to it.

The sequence of all of the 3 directives (##~[[...]]]##, ##masterDefEntry##,
and ##masterDefList##) makes no difference.
Write them in whatever order is easiest or best for you to organize your
document.

Multiple links can point to a single definition entry.
Definition entries do not need to be linked to at all.

//If you click on a reference link  and the definition text
is not displayed in a pop-up, then this reference document was built in standalone mode.
In that case, your browser will scroll to the target location in the document.

==== Full Master Definition List Sample

=====Sample Master Definition List Section
You can insert the Definition List wherever you want to in your document.
<<masterDefList>>

<<masterDefEntry Scott, Michael>>Office manager.
Notice that even though I have written this entry first and I have referenced
it first, it will not be first
in the list of entries because the list gets sorted by the definienda.

Main body text paragraph here, with the [[Scott, Michael]] auto-labelled link,
and a second [[Beasley, Pam|explicitly labelled link]].
And to show that multiple references to a shared entry work, here's a
[[Scott, Michael|second link to the Scott entry]].

<<masterDefEntry Beasley, Pam>>Saleswoman.  Previously the office receptionist.


==Styling <<enumFormatReset A>>

This section of the reference guide explains how to style text beyond the
abilities of the basic text styling directives ([[#jcsect_StrongText]],
[[#jcsect_EmphasizedText]], [[#jcsect_MonospaceFonts]], etc.).

If you have permissions to use the [[#jcsect_StyleSheet]] directive, then you
can customize the appearance and layout of the many un-classed elements that
JCreole generates, as well as the several CSS classes that JCreole writes for
this purpose.

===Styling arbitrary HTML Elements
To avoid unintended consequences to the framing HTML page, you should always
narrow your CSS selectors.
Since applications should always wrap JCreole-generated content with a
##jcreole## div, you should narrow with ##div.jcreole##.
For example, say you want to color all divs and paragraphs blue,
you should not style with
{{{
    div, p { background-color: blue; }
}}}
but with
{{{
    div.jcreole div, div.jcreole p { background-color: blue; }
}}}

===Available JCreole-generated CSS Classes
The following CSS selectors are useful for targeting styles as described.

*=div.jcreole|The entire block of JCreole-generated content.\\
(JCreole sets this class in the provided framing boilerplate, we set it in all
of our applications, and recommend that integrators do the same, but we can't
guarantee that applications will provide it.)
*=span.jcreole_underline|You (or your application) should normally
style this class as ##text-decoration:underline##.
*=span.jcreole_orphanLink|You can infer the purpose.
*=table.jcreole_data}Generated tables
*=table.jcreole_even|Even numbered body rows of generated tables
*=table.jcreole_odd|Odd numbered body rows of generated tables
*=div.jcx|[[#jcsect_JcxblockCreateCustomStylableBlockElement|jcxBlocks]].
*=span.jcx|[[#jcsect_JcxspanCreateCustomStylableInlineElement|jcxSpans]].
*=div.jcx_toc|HTML ##div## container for [[#jcsect_TocTableOfContents]].\\
Present whether table generated by programmatic calls or by toc directive.
*=ul.jcx_toc|HTML ##ul## container for [[#jcsect_TocTableOfContents]].\\
Present unless your application generates the TOC table HTML itself.
*=span.jcreole_nowiki|Inline ~{{{...~}}} Nowiki as described in the
[[#jcsect_PreventingMarkupInterpretation]] section.
*=span.jcx_enum|Section enumeration labels in body headers and in
table-of-contents (but the latter may be overridden with following class name).
This does style the &sect; character as well as the varying string.
If you want stylings to apply only to body heading tags, then narrow your
selectors with heading tag names.
*=div.jcx_toc span.jcx_enum|Same as previous but only applies to
enumeration labels inside of table-of-contents, and only if the t-o-c HTML is
generated by JCreole (as opposed to by your application).
*=span.jcreole_hbody|Heading tag text content.
Includes any section enumeration formatting (i.e., these elements include
jcx_enum spans, if any).
Narrow the selector with heading tag names for heading-level-specific styling.
*=span.jcreole_lh|Heading segment of [[#jcsect_HeadedListItems]], analogous to a table ##th## cell.
*=span.jcreole_ld|Data segment of [[#jcsect_HeadedListItems]], analogous to a table ##td## cell.

Class names with the string "jcx" instead of "jcreole" are for management of
Plugin-specific functionalities.
For example, class names related to tables are prefixed with "jcreole_" since
tables are a basic Creole 1.0 feature;
but class names related to table-of-contents are prefixed with "jcx_" since
table-of-contents are implemented as a JCreole plugin and there is no such
feature in basic Creole.

As mentioned in the relevant sections above, by default JCreole generates no
section enumerations or table-of-contents, so setting the CSS classes for those
functions will have no effect if you or your application don't enable the
feature.

==Enumeration Formats

An //enumeration formatting string// is a 6-character string that specifies how
to format header/section enumerations for each of the 6 supported heading
levels.  For example, in the specification "##{{{A0a1__}}}##", ##A## specifies the
formatting for level 1 headings (//h1//'s), ##0## specifies the formatting for
level 2 headings, etc.

=== Formatting characters

Each character in the enumeration formatting string specifies the formatting of
level indicated by the character's position, as follows.

*=A:|A, B, C, D...
*=a:|a, b, c, d...
*=0:|0, 1, 2, 3...
*=1:|1, 2, 3, 4...
*=_:|//no label// (differentiated from ##x## only for TOCs as explained next).
*=x:|//no label// (differentiated from ##_## only for TOCs as explained next).

It is intended to support additional formatting characters in the future
(especially ##I## and ##i## for upper-case and lower-case roman numerals).

=== Section-inclusion Strings

Table-of-contents may display all section levels, or may exclude specified
levels.

A //section-inclusion string// is a 6-character string that specifies inclusion
of a heading/section for each of the 6 supported  heading levels.
For example, in the specification "##{{{x_0101}}}##", ##x## specifies inclusion
for level 1 headings (//h1//'s), ##_## specifies inclusion for the level 2
heading, etc.

=== Inclusion characters

Each character in the section-inclusion string specifies inclusion or exclusion
of the level indicated by the character's position, as follows.

* **x**  Exclude headings of this level from the TOC.
* **_** or **A** or **a** or **0** or **1**

To state this more generally, the character x means to exclude the level, and
any other //supported// character means to include the level---
where the supported characters are characters listed in the list in the
[[#jcsect_FormattingCharacters]] section.

You can completely control section inclusion/exclusion by using just the
characters ##x## and ##_##.
The only reason we support the alternative characters in place of ##_## is
so you can make up one optimized enumeration-formatting + section-inclusion
string that can fulfill both purposes.
I.e. you could use the same exact string in both ##{{{<<enumFormats>>}}}## and
##{{{<<toc>>}}}## directives.
