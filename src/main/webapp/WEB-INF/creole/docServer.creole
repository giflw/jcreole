=JCreole Document Server

This is a place-holder .creole page for a JCreole Document Server web application.
It applies to both the traditional Servlet version and the Spring version.

The application administrator should move/remove or edit this file,
("##docServer.creole##").

This file resides in the application's //creoleSubdir//, which defaults
to ##WEB-INF/creole##.

//creoleSubdir// can be changed with a web app context parameter
(web app context parameters may be changed in "##web.xml##" or by using
container-specific facilities).
If ##creoleSubdir## is a relative path, it is relative to the web application
base directory.

Web application developers should have no problem using the provided Servlet
to add .creole-reading ability to their own web applications.
Just adding the provided jar files to your own WEB-INF/lib directory, and
merge the settings from our ##web.xml## file into yours.

==Setup

Add your .creole document files, and //boilerplate// HTML files underneath
##creoleSubdir##.  Modify or replace the provided ##boilerplate.html## as
you wish.  You can also follow the example and put ##boilerplate.html## files
into any or all subdirectories.
Requests will always try to use ##boilerplate.html## from the subdirectory of
the request path, then try parent directories recursively until a
##boilerplate.html## is found.
To reference relative resources inside of boilerplate files, use variable ##\${contextPath}## as described below instead of relative URLs,
because relative paths will resolve relative to the
requested URL directory instead of relative to the directory containing the
loaded ##boilerplate.html## file.

Add all content files other than ##*.creole## and ##boilerplate.html##
directly under the web app home directory, in subdirectories corresponding
to the directory of the referring ##*.creole## file.
For example, if the user requests ##http:~//yourhost/docServer/alpha/beta.html##,
then the Creole file ##WEB-INF/creole/alpha/beta.creole## will be read, and
referenced images, CSS or other files will be loaded relative to directory
##alpha## in the webapp root dir.

Style sheets ##jcreole.css## and ##site.css## (in this order, so that
##site.css## will have precedence) will automatically load into your pages.
Though these files will be sought in parent directories too, it works
differently than the ##boilerplate.html## algorihtm described above.
Files ##jcreole.css## and ##site.css## are sought first in the application
root directory, then in all subdirectories going to the requested  subdirectory.
All of these CSS files are added, so that styles set in subdirectories will
either add to or replace those set in superdirectories.

=== Auto-Indexing
The supplied ##index.creole## provides auto-indexing.
If you leave this file in place, then accessing URLs of directories ending in slashses will list the directory's contents (the Creole files and subdirectory entries).
You can put your own ##index.creole## file into any subdirectory of the //creoleSubdir// and it will override the provided auto-indexing index file from that location down.
When directory URLs are requested (with trailing slash), the current directory and then ancestor directories are checked in order for an ##index.creole## file, in the same fashion as a search for a boilerplate file.
##index.creole## files are processed like any other .creole file, of course, so the boilerplate will be applied to it according to the algorim previously described.

Index files, either the provided ##index.creole## or your own, automatically displays the contents of //readme//files right under the directory listing.
For the directory that is being listed, if a ##readme.creole## file resides in that directory then it is displayed.
Otherwise, if a ##readme.txt## resides the the corresponding directory under the main webapp root dir, then it is displayed.
To disable this feature, remove the \${readmeContent} reference in the ##boilerplate.html## file.

Note the general requirement of this application, that for the ##index.creole## to be loaded when a directory URL is given, the URL must end with a forward slash.
The provided auto-indexing ##index.creole## takes care of this if you use auto-indexing for site navigation.
If you author your own cross-directory references, just remember to end destinaton directory URLs with slashes.
Any URL that you copy from your browser will work, but if you write a directory URL from memory, remember the trailing slash.


=== Example showing file accesses for a request.

Application installed with war name ##docServer.war## or manually exploded
to directory of name ##docServer## (procedure depends on your application
server).

Exploded webapp installation directory:  ##/local/tomcat/webapps/docServer##

Default creoleSubdir:  ##/local/tomat/webapps/docServer/WEB-INF/creole##

Request URL:  ##http:~//yourhost/docServer/alpha/beta.html##

Creole file loaded:  ##/local/tomcat/webapps/docServer/WEB-INF/creole/alpha/beta.creole##

//Other// files referenced relatively from ##beta.creole## will load relative
to: ##/local/tomcat/webapps/docServer/alpha##

//Other// file references that start with / will resolve to URLs beginning
with ##http:~//yourhost/##.
To make references that resolve to URLs beginning with ##http:~//yourhost/##,
use variable ##\${contextPath}##,
like:  ##<img src="\${contextPath}/file.png">##

Boilerplate loaded:  First of following which exists:
{{{
    /local/tomcat/webapps/docServer/WEB-INF/creole/alpha/boilerplate.html
    /local/tomcat/webapps/docServer/WEB-INF/creole/boilerplate.html
}}}

CSS files loaded:    All of the following which exist, in this order:
{{{
    /local/tomcat/webapps/docServer/jcreole.html
    /local/tomcat/webapps/docServer/alpha/jcreole.html
    /local/tomcat/webapps/docServer/site.html
    /local/tomcat/webapps/docServer/alpha/site.html
}}}

==External Docs
More often than not, your documents should have a longer lifetime than any
version of a web application.
Therefore, it's often a good idea to locate your .creole document files
in a location outside of the web applications.
If you do this, then you can update the web application without effecting your
documents.

Just specify an absolute ##creoleSubdir## (as described above) for a directory
that is not under the web application base directory.  Before adding your own
files, copy into this new directory the supplied files in ##WEB-INF/creole##.

If your creole files reference other local files (images, style sheets, text files, etc.), then you will have to use app server features if you want to serve them from an external location (for the same reasons as for locating *.creole files externally).
A good design pattern is to use this JCreole webapp only to serve your creole documents.
The creole documents reference images and other files that you serve from a separate web site on a co-located light-weight web server such as [[http://www.lighttpd.net|lighttpd]].
Static web server content doesn't need to be bundled like web apps, and can be configuration managed in place with various technologies (WebDav, Git, etc.).
Most production webapps run behind a httpd proxy or plugin, and that is ideal since it's designed for precisely what we are talking about here.
