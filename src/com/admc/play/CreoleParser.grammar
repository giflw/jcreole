%package "com.admc.play";

%import "java.util.List";
%import "java.net.URL";
%import "java.net.MalformedURLException";
%import "org.apache.commons.lang.StringEscapeUtils";

%embed {:
    private boolean validateOnly;
    // TODO:  urlBase and pathBase need to be instance vars set by setter or
    //        constructor param.
    private String urlBase = "http://fake.com";
    private String pathBase = "/contextRoot";
    private StringBuilder sb = new StringBuilder();
    public void setValidateOnly(boolean validateOnly) {
        this.validateOnly = validateOnly;
    }
    public void out(String s) {
        if (validateOnly) return;
        sb.append(s);
        sb.append('\n');
    }
    /*  I believe our scanner will always provide Strings, so we'll never need
     *  to write individual chars.
    public void out(char c) {
        if (validateOnly) return;
        sb.append(c);
        sb.append('\n');
    }
    */
    public String getOutput() {
        return sb.toString();
    }

    /**
     * Returns a single XML-washed String
     */
    public static StringBuilder concat(List inList) {
        @SuppressWarnings("unchecked")
        List<Symbol> symList = (List<Symbol>) inList;
        Token t;
        StringBuilder sb = new StringBuilder();
        for (Symbol s : symList) {
            if (!(s instanceof Token))
                throw new IllegalStateException(
                        "element not a Token but a "
                        + s.getClass().getName());
            t = (Token) s;
            if (!(t instanceof WashedToken) && !(t.value instanceof String))
                throw new IllegalStateException(
                        "element value not a String but a "
                        + t.value.getClass().getName());
            sb.append((t instanceof WashedToken)
                    ? ((WashedToken) t).getCleanString()
                    : StringEscapeUtils.escapeHtml(t.getStringVal()));
        }
        return sb;
    }
:};

%terminals BLOCK_PRE, INLINE_PRE, TEXT, HARDSPACE, END_PARA, HARDLINE, HOR, URL;
%terminals H1, H2, H3, H4, H5, H6;

%typeof BLOCK_PRE, INLINE_PRE, TEXT, URL = "String";
%typeof H1, H2, H3, H4, H5, H6 = "String";

%goal blocks;

/* The grammar */
blocks = block.b+ {:
            return new WashedToken(concat(_list_b).toString());
        :}
        |;  // This last allows for empty document
block = isoblock.f+ {:
            return new WashedToken(concat(_list_f).toString());
        :}
        | inline.f+ END_PARA {:
            if (((Symbol) _list_f.get(f.length-1)).value.equals("\n"))
                _list_f.remove(f.length-1);
            return new WashedToken("<p>\n" + concat(_list_f) + "\n</p>\n");
        :};
inline = INLINE_PRE.text {:
            return new WashedToken("<span class=\"pref\">"
                    + StringEscapeUtils.escapeHtml(text) + "</span>");
        :}
        | TEXT
        | HARDSPACE {: return new WashedToken("&nbsp;"); :}
        | HARDLINE {: return new WashedToken("<br>\n"); :}
        | URL.text {:
            int nullPos = text.indexOf('\0');
            String label = (nullPos > -1) ? text.substring(0, nullPos) : text;
            String url = (nullPos > -1) ? text.substring(nullPos + 1) : text;
            if (url.length() > 0 && url.charAt(0) == '/') {
                url = urlBase + url;
            } else try {
                new URL(url);
            } catch (MalformedURLException mue) {
                url = urlBase + pathBase + '/' +  url;
            }
            return new WashedToken("<a href=\""
                + StringEscapeUtils.escapeHtml(url)
                + "\">" + label + "<a>");
        :}
        ;

// These may not contain any inlines
isoblock = HOR {: return new WashedToken("<hr>\n"); :}
        | H1.text {: return new WashedToken("<h1>"
                + StringEscapeUtils.escapeHtml(text) + "</h1>\n");
        :}
        | H2.text {: return new WashedToken("<h2>"
                + StringEscapeUtils.escapeHtml(text) + "</h2>\n");
        :}
        | H3.text {: return new WashedToken("<h3>"
                + StringEscapeUtils.escapeHtml(text) + "</h3>\n");
        :}
        | H4.text {: return new WashedToken("<h4>"
                + StringEscapeUtils.escapeHtml(text) + "</h4>\n");
        :}
        | H5.text {: return new WashedToken("<h5>"
                + StringEscapeUtils.escapeHtml(text) + "</h5>\n");
        :}
        | H6.text {: return new WashedToken("<h6>"
                + StringEscapeUtils.escapeHtml(text) + "</h6>\n");
        :}
        | BLOCK_PRE.text {: return new WashedToken("<pre>\n"
                + StringEscapeUtils.escapeHtml(text) + "\n</pre>\n");
        :}
        ;
