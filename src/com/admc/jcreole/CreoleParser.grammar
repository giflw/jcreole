/*
 * Copyright 2011 Axis Data Management Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


%package "com.admc.jcreole";

%import "java.net.URL";
%import "java.net.MalformedURLException";
%import "org.apache.commons.lang.StringEscapeUtils";
%import "java.util.regex.Pattern";
%import "java.util.List";
%import "java.util.Map";
%import "java.util.HashMap";
%import "java.util.regex.Matcher";
%import "java.util.Deque";
%import "java.util.ArrayDeque";
%import "java.util.Collections";
%import "org.apache.commons.logging.Log";
%import "org.apache.commons.logging.LogFactory";

%embed {:
    private static Log log = LogFactory.getLog(CreoleParser.class);

    private boolean wrote;  // Just used to write block-separating blank lines
    // TODO:  urlBase and pathBase need to be instance vars set by setter or
    //        constructor param.
    // TODO:  Think about whether this generous whitespace stripping is ok.
    private static Pattern LabelPattern =
            Pattern.compile("\\s*\\Q{{\\E\\s*(.+?)\\s*\\Q}}\\E\\s*");
    private static Pattern IntraWikiPattern = Pattern.compile("([^:]+):(.+)");
    private String urlBase;
    private String pathBase;
    // Following is just for testing.
    // Before use this class in a real product, remove the assignment so it
    // will default to null, thereby disabling intra-wiki linking.
    // (Integrators will the use the setter to enable intra-wiki linking).
    private IntraWikiMapper intraWikiMapper = new IntraWikiMapper() {
        public String toPath(String wikiName, String wikiPage) {
            return "{" + wikiName + '/' + wikiPage + '}';
        }
    };
    private int lastInserterId = 0;
    private Map<Integer, CssClassInserter> cssClassInserters
            = new HashMap<Integer, CssClassInserter>();

    private String postProcess(StringBuilder sb) {
        sb.insert(0, "<div style=\"jcreole\">");
        sb.append("</div>");
        log.debug("PRE-PostProcess[" + sb + ']');
        int offset = 0;
        CssClassInserter inserter;
        List<Integer> markerOffsets = new ArrayList<Integer>();
        String idString;
        int id;
        int foundMarkers = 0;
        while ((offset = sb.indexOf("\u001a", offset)) > -1) {
            // Unfortunately StringBuilder has no indexOf(char).
            // We could make do StringBuilder.toString().indexOf(char), but
            // that's a pretty expensive copy operation.
            markerOffsets.add(Integer.valueOf(offset));
            if (sb.length() < offset + 4)
                throw new CreoleParseException(
                        "Marker offset too close to end of output");
            idString = sb.substring(offset + 1, offset + 5);
            id = Integer.parseInt(idString, 16);
            inserter = cssClassInserters.get(Integer.valueOf(id));
            if (inserter == null)
                throw new IllegalStateException("Lost inserter with id " + id);
            foundMarkers++;
            inserter.setContext(sb, offset);
            offset += 5;  // Move past the marker that we just found
        }
        List<CssClassInserter> inserters =
                new ArrayList(cssClassInserters.values());
        Collections.sort(inserters);
        Collections.reverse(inserters);
        log.warn(Integer.toString(markerOffsets.size())
                + " markers found: " + markerOffsets);
        log.warn(Integer.toString(inserters.size()) + " inserters sorted");
        if (foundMarkers != inserters.size())
            throw new IllegalStateException(
                    "Marker/Inserter mismatch.  " + foundMarkers
                    + " markers found, but there are " + inserters.size()
                    + " inserters");
        // Can not run insert() until after the inserters have been sorted.
        if (inserters.size() > 0) {
            StringBuilder inserterReport = new StringBuilder();
            for (CssClassInserter ins : inserters) {
ins.add(classz[nextOne++]);
                if (inserterReport.length() > 0) inserterReport.append(", ");
                inserterReport.append(ins.getIdString()
                        + '@' + ins.getInsertionOffset());
                ins.insert();
            }
            log.warn(inserterReport.toString());
        }
        return sb.toString();
    }
private String[] classz = { "alpha", "beta", "gamma", "delta", "mu", "nu", "omicron" };
int nextOne = 0;

    /**
     * Assign a mapper from wiki page names to actual paths or URLs to the
     * pages.
     *
     * @see IntraWikiMapper
     */
    public void setIntraWikiMapper(IntraWikiMapper intraWikiMapper) {
        this.intraWikiMapper = intraWikiMapper;
    }

    /**
     * Use this method and setPathBase to absolutize link and image URLs.
     * It is usually better to let HTML behavior absolutize these as it is
     * designed to do.
     */
    public void setUrlBase(String urlBase) {
        this.urlBase = urlBase;
    }

    /**
     * Use this method and setUrlBase to absolutize link and image URLs.
     * It is usually better to let HTML behavior absolutize these as it is
     * designed to do.
     */
    public void setPathBase(String pathBase) {
        this.pathBase = pathBase;
    }

    /**
     * Returns a single XML-washed String
     *
     * Uses character \b internally so INPUT STRING MAY NOT CONTAIN \b!
     * The specified List must be all WashedTokens.
     */
    public static StringBuilder joinWashedTokens(List<WashedToken> wtList) {
        StringBuilder sb = new StringBuilder();
        for (WashedToken t : wtList) sb.append(t.toString());
        return sb;
    }

    /**
     * Returns a single XML-washed String
     *
     * Uses character \b internally so INPUT STRING MAY NOT CONTAIN \b!
     * The specified List must be either all non-washed Tokens.
     */
    public static WashedToken mkWashedToken(List<String> sList) {
        //@SuppressWarnings("unchecked")
        StringBuilder sb = new StringBuilder();
        for (String s : sList) sb.append(s);
        return new WashedToken(clean(sb.toString()));
    }

    private String absoluteUrl(String path) {
        if (urlBase == null && pathBase == null) return path;
        if (path.length() > 0 && path.charAt(0) == '/') {
            return urlBase + path;
        } else try {
            new URL(path);
        } catch (MalformedURLException mue) {
            return ((urlBase == null) ? "" : urlBase)
                    + ((pathBase == null) ? "" : pathBase) + '/' +  path;
        }
        return path;
    }

    private WashedToken blockToken(String s) {
        if (wrote) return new WashedToken("\n" + s);
        wrote = true;
        return new WashedToken(s);
    }

    /**
     * Uses character \b internally so INPUT STRING MAY NOT CONTAIN \b!
     *
     * Preserves &...; entities in input but otherwise applies new entities to
     * escape special HTML characters.
     */
    public static String clean(String s) {
        return StringEscapeUtils.escapeHtml(s.replaceAll("&(?=\\w+;)", "\b"))
                .replace('\b', '&');
    }

    private enum FontMode {
        EMPHASIZED("em"), STRONG("strong");
        private String tagName;
        private FontMode(String tagName) { this.tagName = tagName; }
        public String toString() { return tagName; }
    }

    public WashedToken newListNest(List<LiToken> liTokenList) {
        StringBuilder sb = new StringBuilder();
        int curLevel = 0;
        Map<Integer, Character> levelTypeMap =
                new HashMap<Integer, Character>();
        for (LiToken liToken : liTokenList) {
            if (liToken.getLevel() == curLevel + 1) {
                sb.append(indent(liToken.getLevel()-1))
                        .append('<')
                        .append((liToken.getType() == '#') ? "ol" : "ul")
                        .append(mark(true, false, true))
                        .append(">\n");
                levelTypeMap.put(Integer.valueOf(liToken.getLevel()),
                        Character.valueOf(liToken.getType()));
            } else if (liToken.getLevel() < curLevel) {
                for (int hiLevel = curLevel;
                        hiLevel > liToken.getLevel(); hiLevel--)
                    sb.append(indent(hiLevel-1)).append("</")
                            .append((levelTypeMap.remove(Integer.valueOf(hiLevel))
                            == '#') ? "ol" : "ul").append(">\n");
                if (liToken.getType() !=
                        levelTypeMap.get(liToken.getLevel()).charValue())
                    throw new CreoleParseException(
                            "Illegal type transition", liToken);
            } else if (liToken.getLevel() == curLevel) {
                // All we do in this case is to validate the type.
                if (liToken.getType() != levelTypeMap.get(curLevel).charValue())
                    throw new CreoleParseException(
                            "Illegal type transition", liToken);
            } else {
                throw new CreoleParseException(
                        "Illegal transition from list level "
                        + curLevel + " to " + liToken.getLevel(), liToken);
            }
            sb.append(indent(liToken.getLevel())).append("<li")
                    .append(mark(true, false, true)).append('>')
                    .append(liToken.getContent()).append("</li>\n");
        }
        for (int hiLevel = curLevel; hiLevel > 0; hiLevel--)
            sb.append(indent(hiLevel-1)).append("</")
                    .append((levelTypeMap.remove(Integer.valueOf(hiLevel))
                    == '#') ? "ol" : "ul").append(">\n");
        return new WashedToken(sb.toString());
    }

    private String mark(boolean blockType, boolean jcxType, boolean writeAttr) {
        CssClassInserter cI = new CssClassInserter(++lastInserterId,
                blockType, jcxType, writeAttr);
        cssClassInserters.put(Integer.valueOf(lastInserterId), cI);
        return "\u001a" + cI.getIdString();
    }

    /**
     * TODO:  I just wrote this to get it working now.
     * Can very likely be done much more efficiently and/or elegantly.
     */
    public static String indent(int num) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < num; i++) sb.append(INDENT_STRING);
        return sb.toString();
    }

    Deque<FontMode> fontModeStack = new ArrayDeque<FontMode>(2);

    private StringBuilder fontCaps() {
        StringBuilder b = new StringBuilder();
        FontMode fm;
        while (fontModeStack.peekFirst() != null)
            b.append("</").append(fontModeStack.removeFirst()).append('>');
        return b;
    }

    private static final String INDENT_STRING = "  ";
:};

%terminals BLOCK_PRE, INLINE_PRE, TEXT, HARDSPACE, END_PARA, HARDLINE, HOR;
%terminals URL, IMAGE, LI, END_LI, FINAL_LI, END_ROW, FINAL_ROW, CELL, END_H;
%terminals HEADING, EM_TOGGLE, STRONG_TOGGLE, PLUGIN;
// %terminals HEADING, EM_TOGGLE, STRONG_TOGGLE, PLUGIN_INLINE, PLUGIN_BLOCK;

%typeof BLOCK_PRE, INLINE_PRE, TEXT, URL, IMAGE, PLUGIN = "String";
%typeof listnest = "WashedToken";

%goal blocks;

/* The grammar */
blocks = block.b+ {:
            return new WashedToken(postProcess(joinWashedTokens(_list_b)));
        :}
        |;  // This last allows for empty document

block = isoblock.f+ {:
            return new WashedToken(joinWashedTokens(_list_f).toString());
        :}
        | inline.f+ END_PARA {:
            StringBuilder b = joinWashedTokens(_list_f);
            int lastI = b.length() - 1;
            if (b.charAt(lastI) == '\n') b.deleteCharAt(lastI);
            return blockToken("<p" + mark(true, false, true)
                    + '>' + b + fontCaps() + "</p>\n");
        :}
        | listnest.l {: return blockToken(l.toString()); :}
        | table.t {: return blockToken(t.toString()); :}
        | HEADING.h inline.f+ END_H {:
            int hLevel = ((Token) (h)).getIntParam();
            StringBuilder b = joinWashedTokens(_list_f);
            //int lastI = b.length() - 1;
            //if (b.charAt(lastI) == '\n') b.deleteCharAt(lastI);
            return blockToken("<h" + hLevel + mark(true, false, true) + '>'
                    + b + fontCaps() + "</h" + hLevel + ">\n");
        :}
        ;

table = lastrow {: log.fatal("DON'T FORGET TO IMPL. SINGLE-ROW TABLES!"); return new WashedToken("<table/>\n"); :}
      | row.rs+ lastrow.lr {:
            int cols = -1;
            _list_rs.add(lr);
            String[][] cells = new String[_list_rs.size()][];
            int i = -1, j;
            for (Symbol rSym : (List<Symbol>) _list_rs) {
                cells[++i] = new String[((List) rSym.value).size()];
                if (cells[i].length > cols)
                    cols = cells[i].length;
                j = -1;
                for (Symbol cTok : (ArrayList<WashedToken>) rSym.value)
                    cells[i][++j] = cTok.toString();
            }

            // Purposefully not supporting HTML tfoot element, because it's
            // pretty much impossible for it to degrade for non-supporting
            /// browsers.
            // Now break down cells into hCells + bCells (head/body)
            // + bCellIsHead.
            List<String[]> hCellList = null;
            List<String[]> bCellList = null;
            List<boolean[]> bCellIsHead = new ArrayList<boolean[]>();
            boolean[] ih;
            int headCount;
            for (int r = 0; r < cells.length; r++) {
                ih = new boolean[cells[r].length];
                headCount = 0;
                for (int c = 0; c < cells[r].length; c++)
                    if (cells[r][c].length() > 0
                            && cells[r][c].charAt(0) == '\u0001') {
                        headCount++;
                        cells[r][c] = cells[r][c].substring(1);
                        ih[c] = true;
                    }
                if (headCount == cells[r].length) {
                    // All cells in this row are Headings.  Prefer hCells.
                    if (bCellList == null) {
                        if (hCellList == null)
                            hCellList = new ArrayList<String[]>();
                        hCellList.add(cells[r]);
                    } else {
                        bCellList.add(cells[r]);
                        bCellIsHead.add(ih);
                    }
                } else {
                    // All cells in this row are not Headings.  Require bCells.
                    if (bCellList == null)
                        bCellList = new ArrayList<String[]>();
                    bCellList.add(cells[r]);
                    bCellIsHead.add(ih);
                }
            }
            if (bCellList != null && bCellList.size() != bCellIsHead.size())
                throw new RuntimeException(
                        "Internal Error.  Mismatch between body row count and "
                        + "body-cell-is-head-count.  " + bCellList.size()
                        + " vs. " + bCellIsHead.size());
            // We have parallel lists that we want to iterate through with
            // index.  This is done more simply with native arrays than lists.
            String[][] hCells = (hCellList == null)
                    ? null : hCellList.toArray(new String[0][]);
            String[][] bCells = (bCellList == null)
                    ? null : bCellList.toArray(new String[0][]);
            boolean[][] isHead = (bCellIsHead == null)
                    ? null : bCellIsHead.toArray(new boolean[0][]);
            if (isHead != null) for (int k = 0; k < isHead.length; k++)
                if (isHead[k].length != bCells[k].length)
                    throw new RuntimeException(
                            "Internal Error.  Mismatch between row cell count "
                            + "and row-is-head-count for row #" + (k+1) + ".  "
                            + bCells.length + " vs. " + isHead[k].length);

            StringBuilder sb = new StringBuilder(
                    "<table class=\"jcreole_data")
                    .append(mark(true, false, false)).append("\">\n");
                    // 'data' class is to distinguish from formatting tables
                    // which may be needed in the future.
            int unfilledCells;
            if (hCells != null) {
                sb.append(indent(1)).append("<thead>");
                for (int r = 0; r < hCells.length; r++) {
                    sb.append('\n').append(indent(2)).append("<tr")
                            .append(mark(true, false, true)).append("> ");
                    for (int c = 0; c < hCells[r].length; c++) {
                        sb.append("<th");
                        if (c + 1 == hCells[r].length) {
                            unfilledCells = cols - hCells[r].length;
                            if (unfilledCells > 0)
                                sb.append(" colspan=\""
                                + (1+unfilledCells) + '"');
                        }
                        sb.append(mark(true, false, true))
                        .append('>').append(hCells[r][c]).append("</th>");
                    }
                    sb.append(" </tr>");
                }
                sb.append('\n').append(indent(1)).append("</thead>\n");
            }
            if (bCells != null) {
                sb.append(indent(1)).append("<tbody>");
                for (int r = 0; r < bCells.length; r++) {
                    sb.append('\n').append(indent(2))
                        .append("<tr class=\"jcreole_")
                        .append((r == 2 * (r/2)) ? "even" : "odd").append('"')
                        .append(mark(true, false, true)).append("> ");
                    for (int c = 0; c < bCells[r].length; c++) {
                        sb.append("<t").append(isHead[r][c] ? 'h' : 'd');
                        if (c + 1 == bCells[r].length) {
                            unfilledCells = cols - bCells[r].length;
                            if (unfilledCells > 0)
                                sb.append(" colspan=\""
                                + (1+unfilledCells) + '"');
                        }
                        sb.append(mark(true, false, true))
                        .append('>').append(bCells[r][c]).append("</t")
                                .append(isHead[r][c] ? 'h' : 'd').append('>');
                    }
                    sb.append(" </tr>");
                }
                sb.append('\n').append(indent(1)).append("</tbody>\n");
            }
            return new WashedToken(sb.append("</table>\n").toString());
        :}
      ;

row   = cell.c+ END_ROW;
lastrow   = cell.c+ FINAL_ROW;
cell  = CELL.c inline.l+ {: return new WashedToken(
                    ((((Token) c).getIntParam() == 1) ? "\u0001" : "")
                    + joinWashedTokens(_list_l) + fontCaps()); :};

listnest = lastli.llitem {:
                // A single <li> list.
                // Not useful in final docs, but definitely useful for drafts.
                return newListNest(Collections.singletonList((LiToken) llitem));
            :}
         | li.litem+ lastli.llitem {:
                List<LiToken> liTokens = (List<LiToken>) _list_litem;
                liTokens.add((LiToken) llitem);
                return newListNest(liTokens);
            :};

li       = liel.li inline.l+ END_LI {:
                ((LiToken) li).setContent(joinWashedTokens(_list_l).toString()
                        + fontCaps());
                return li;
            :};
lastli   = liel.li inline.l+ FINAL_LI {:
                ((LiToken) li).setContent(joinWashedTokens(_list_l).toString()
                        + fontCaps());
                return li;
            :};
liel     = LI.listart {: return new LiToken((Token) listart); :};

inline = INLINE_PRE.text {:
            return new WashedToken("<span class=\"jcreole_pref"
                    + mark(true, false, false)
                    + "\">" + clean(text) + "</span>");
        :}
        | PLUGIN.t {:
            return new WashedToken("<" + t + '>');
        :}
        | TEXT.f+ {: return mkWashedToken((List<String>) _list_f); :}
        | HARDSPACE {: return new WashedToken("&nbsp;"); :}
        // For hardline we do not write a \n.  If user wants a \n in addition
        // to the <br>, they should write "<br>\n".
        | HARDLINE {: return new WashedToken("<br>"); :}
        | EM_TOGGLE.t {:
            Token token = (Token) t;
            if (FontMode.EMPHASIZED.equals(fontModeStack.peekFirst())) {
                fontModeStack.pop();
                return new WashedToken("</em>");
            }
            if (fontModeStack.contains(FontMode.EMPHASIZED))
                throw new CreoleParseException(
                        "Font presentations modes are tangled", token);
            fontModeStack.push(FontMode.EMPHASIZED);
            return new WashedToken("<em" + mark(false, false, true) + '>');
        :}
        | STRONG_TOGGLE.t {:
            Token token = (Token) t;
            if (FontMode.STRONG.equals(fontModeStack.peekFirst())) {
                fontModeStack.pop();
                return new WashedToken("</strong>");
            }
            if (fontModeStack.contains(FontMode.STRONG))
                throw new CreoleParseException(
                        "Font presentations modes are tangled", token);
            fontModeStack.push(FontMode.STRONG);
            return new WashedToken("<strong" + mark(false, false, true) + '>');
        :}
        | URL.text {:
            Token token = (Token) _symbol_text;
            int delimPos = token.getIntParam();
            String inLbl = (delimPos > -1)
                         ? text.substring(delimPos + 1) : null;
            String urlText = (delimPos > -1)
                           ? text.substring(0, delimPos) : text;
            String url = null;
            Matcher matcher = (text.startsWith("http:")
                    || text.startsWith("https:")
                    || text.startsWith("ftp:")) ? null
                    : IntraWikiPattern.matcher(urlText);
            if (matcher != null && matcher.matches()) {
                if (intraWikiMapper == null) {
                    throw new IllegalStateException(String.format(
                    "%s  @line:col %d:%d",
                        "Intra-wiki links not supported.",
                        token.getLine() + 1, token.getColumn() + 1));
                }
                url = intraWikiMapper.toPath(
                        matcher.group(1), matcher.group(2));
            } else {
                url = clean(absoluteUrl(urlText));
            }
            String label = null;
            if (inLbl == null) {
                label = clean(text);
            } else {
                Matcher m = LabelPattern.matcher(inLbl);
                label = m.matches()
                    ? ("<img src=\"" + clean(absoluteUrl(m.group(1))) + '"'
                            + mark(false, false, true) + '>')
                    : clean(inLbl);
            }
            return new WashedToken("<a href=\"" + url + '"'
                    + mark(false, false, true) + '>' + label + "</a>");
        :}
        | IMAGE.text {:
            Token token = (Token) _symbol_text;
            int delimPos = token.getIntParam();
            String url = clean(absoluteUrl(
                    (delimPos > -1) ? text.substring(0, delimPos) : text));
            String alt = (delimPos > -1)
                    ? clean(text.substring(delimPos + 1)) : null;
            return new WashedToken("<img src=\"" + url
                + ((alt == null) ? "" : ("\" alt=\"" + alt)) + '"'
                + mark(false, false, true) + '>');
        :}
        ;

// These may not contain any inlines
isoblock = HOR {: return blockToken("<hr" + mark(true, false, true) + ">\n"); :}
        | BLOCK_PRE.text {:
            return blockToken("<pre" + mark(true, false, true) + ">\n"
                    + clean(text.replace("\n }}}", "\n}}}")) + "\n</pre>\n");
                // The replace here is for allowing ^}}} inside of pref block.
                // Spec says to do this for all " }}}", but that is
                // unnecessarily liberal since no escaping is needed except
                // for "^ }}}".
        :}
        ;
