defaultTasks 'jar'

/**
 * You can add to what is here by creating a build file name "local.gradle".
 * If present, it will be applied automatically.
 * One use case for this is to define additional repositories.
 */

project['repos.useMaven'] = 'true'
apply from: 'common.gradle'
apply plugin: 'java'

// This only present because a Java boolean can't be set in a Java properties
// file.
compileJava.options.debug = (!project.hasProperty('javac.debug')
            || Boolean.parseBoolean(project.property('javac.debug')))
sourceCompatibility = '1.5'
targetCompatibility = sourceCompatibility
description = 'JCreole Creole'

//  Work-around for Gradle bug where Runtime classpath must include every
//  Compilation classpath element:
configurations {
    compileOnly
    jflex
    beaver
    baseconf
}

// De-transify dependencies. We aim for precision, not laziness.
//for (Configuration c in configurations) c.transitive = false
// We now let 'ivy.xml' configure transitiveness.

project.rtLibs = null
jar { doFirst {
    project.rtLibs = []
    configurations.runtime.files.each { project.rtLibs << it.name }
    String implVendor = (project.hasProperty('organization')
                        ? project.organization
                        : System.properties['user.name'])
    project.metaInf << files('doc/LICENSE.txt')
    jar { manifest { attributes(
        'Main-Class': 'com.admc.jcreole.JCreole',
        'Class-Path': project.rtLibs.join(' '),
        'Specification-Title': 'JCreole',
        'Specification-Version': project.version,
        'Specification-Vendor': 'Axis Data Management Corp.',
        'Implementation-Title': 'JCreole executable jar',
        'Implementation-Version': project.version,
        'Implementation-Vendor': implVendor
    ) } }
} }

private File grammarFile =
        file('src/main/java/com/admc/jcreole/CreoleParser.grammar')
private File scannerFile =
        file('build/derived-src/com/admc/jcreole/CreoleScanner.java')
private File lexSpecFile = file('src/main/java/com/admc/jcreole/creole.flex')
private File parserFile =
        file('build/derived-src/com/admc/jcreole/CreoleParser.java')
private File termsFile =
        file('build/derived-src/com/admc/jcreole/Terminals.java')

task beaver {
    inputs.source grammarFile
    outputs.file parserFile
}
beaver << {
    if (parserFile.exists()) parserFile.delete()
    javaexec {
        main = '-jar'
        args = [configurations.beaver.asPath, '-d', 'build/derived-src',
                '-t', '-T', grammarFile.path]
    }
    assert parserFile.exists()
}
beaver.description = '''Generate Beaver parser 'CreoleParser'.'''

task jflex(dependsOn: beaver) {
    inputs.source lexSpecFile
    inputs.source termsFile
    outputs.file scannerFile
    inputs.source fileTree (
        dir:'src/main/java',
        exclude:'**/.*/**',
        include:'**/*.grammar'
    )
}
jflex << {
    assert termsFile.exists():
            'dependOn failed to generate Terminals.java before JFlex runs'
    String jxVerbSwitch = ((project.hasProperty('jflex.verbose')
        && Boolean.parseBoolean(project.property('jflex.verbose')))
        ? '-v' : '-q')
    javaexec {
        main = '-jar'
        args = [configurations.jflex.asPath, '-d',
                // JFlex is so brain-dead that unlike their own Ant task,
                // their base product won't move output files into
                // appropriate package subdirectories, so we must specify.
                'build/derived-src/com/admc/jcreole', jxVerbSwitch,
                '--nobak', lexSpecFile.path]
    }
}
jflex.description = '''Generate JFlex scanner 'CreoleScanner'.'''

// This task only for SCM administrator.  Update version and execute this task.
task updateWrapper(type: Wrapper) { doFirst {
    assert project.hasProperty('newVersion') :
            "Property 'newVersion' is required for task 'updateWrapper'"
    assert project.newVersion == gradle.gradleVersion :
        "You invoke Gradle system with version $gradle.gradleVersion instead of desired version $project.newVersion"
} }
updateWrapper << {
    gradleVersion = project['newVersion']
    println 'WARNING:  Merge our customizations into the newly-generated wrapper scripts'
}
updateWrapper.description = 'Update Gradle version.  For Administrators.'

task serialver(dependsOn: compileJava) << {
    assert project.hasProperty('className'):
            '''Property 'className' is required for task 'serialver'.'''
    String fileSep = System.properties['file.separator']
    // Could alternatively use Gradle's ExecSpec via exec(...)
    String javaHome = System.properties['java.home']
    String javacHome = (javaHome.endsWith("jre")
            ? javaHome.substring(0, javaHome.length() - "/jre".length())
            : javaHome)
    Process process = new ProcessBuilder([
        javacHome + fileSep + 'bin' + fileSep + 'serialver',
        '-classpath',
        'classes' + System.properties['path.separator']
                + configurations.runtime.asPath,
        project.property('className')
    ]).redirectErrorStream(true).start()
    // Must read input before waitFor-ing
    File outFile = new File(System.properties['java.io.tmpdir'],
                'serialVer-' + System.properties['user.name'] + '.txt')
    process.inputStream.eachLine { println it; outFile.write(it + '\n') }
    assert process.waitFor() == 0:  '''Execution of 'serialver' failed'''
    println """Also written to file '$outFile.absolutePath'
so you can read it into your editor."""
}
serialver.description = "Generates Java serialversion for specified 'classname'"

void resolveCheck(configName) {
    int artCount = configurations[configName].files.size()
    // Following test works only if deps' transitive is false.
    if (configurations[configName].allDependencies.size() != artCount) {
        logger.error(
                "Didn't resolve all dependencies for config '$configName'.  "
                + configurations[configName].allDependencies.size()
                + ' dependencies:\n    ' + configurations[configName]
                .allDependencies .collect({it.name}).join('\n    ')
                + '\nbut ' + artCount
                + ' resolved artifacts:\n    '
                + configurations[configName].files.collect({it}).join('\n    ')
                + '\n'
        )
        assert false : "Didn't resolve all dependencies."
    }
    //configurations[configName].files.each { println '+' + it }
    //throw new GradleException("Quittin' early")
    logger.info "$artCount  artifacts resolved"
}

compileJava.dependsOn jflex

sourceSets.main.java.srcDirs =
        [file('src/main/java'), file('build/derived-src')]
compileJava.dependsOn << {
    if (!project.hasProperty('resolveCheck.skip')
            || !Boolean.parseBoolean(project.property('resolveCheck.skip')))
        resolveCheck('compile')
}

task checkTabs << {
    FileTree tree = fileTree(dir: '.')
    tree.exclude '**/.*/**'
    tree.include  '*.*'
    tree.include  'gradlew'
    tree.include  'src/**'
    tree.include  'doc/**'
    def tabFiles = []
    tree.each { if (it.text.indexOf('\t') > -1) tabFiles << relativePath(it) }
    if (tabFiles.size() > 0) println '  ' + tabFiles.join('\n  ')
}
checkTabs.description = 'Reports on any text files containing tab characters'

task zip(dependsOn: ['ref', 'javadoc'], type: Zip) {
    exclude '**/.*/**'
    from configurations.runtime.allArtifacts.files
    from configurations.runtime
    into(project.name + '-' + project.version)
    from ('build/docs/javadoc') { into 'apidocs' }
    from ('.') { include 'doc/**' }
    from ('.') {
        include 'README.txt'
        into 'doc'
    }
    from ('build/distributions') {
        include 'jcreole-ref.html'
        into 'doc'
    }
}
zip.description =
        'Build zip of end-user executable JCreole jar with dependencies'

task srcZip(dependsOn: ['ref', 'javadoc'], type: Zip) {
    classifier = 'src'
    exclude '**/.*/**'
    into(project.name + '-' + project.version)
    from ('build/docs/javadoc') { into 'apidocs' }
    from ('.') {
        include 'app.properties'
        include 'ivy.xml'
        include 'README.txt'
        include 'template*/**'
        include 'src/**'
        include 'test-data/**'
        include 'doc/**'
        include 'build.gradle'
        include 'common.gradle'
        include 'gradle/**'
        include 'gradlew'
        include 'gradlew.bat'
        include 'ivyxml-support.gradle'
    }
}
srcZip.description = 'Build source distribution zip file'

task stage(dependsOn: jar, type: Copy) {
    from configurations.runtime.allArtifacts.files
    from configurations.runtime
    into 'build/stage'
}
stage.description = 'Stage JCreole jar and dependency jars in build/stage'

task ensureLogCfgfile << {
    /* ensureLogCfgfile uses onlyIf instead of inputs/outputs for running
     * conditionally, because we only want to run it if the destination file
     * is missing, regardless of file ages. */
    assert !project.julCfgfile.exists():
        """ensureLogCfgfile's onlyIf not working because running even though
target file exists:  $project.julCfgfile.absolutePath"""
    project.julCfgfile.write(
            file('template-jul.properties').getText('ISO-8859-1'), 'ISO-8859-1')
    println """Local logging cfg file created.  Edit per your needs:
$julCfgfile"""
}
ensureLogCfgfile.onlyIf {
    project.julCfgfile = new File(project.hasProperty('jul.cfgfile')
            ? project.property('jul.cfgfile') : 'local-jul.properties')
    !project.julCfgfile.exists()
}

task ref(dependsOn: ['stage', 'ensureLogCfgfile']) << {
    String refStyle = (project.hasProperty('refStyle')
            ? project.property('refStyle') : 'default')
    /*   Set Gradle param 'refstyle' to 'jqueryui' to generate jquery-ui
         dependent document, instead of the default standalone document. */
    javaexec {
        main = '-jar'
        args = [ 'build/stage/' + project.name + '-' + project.version
                + '.jar',
                '-r',
                'boilerplate-' + refStyle + '.html',
                '-o', 
                'build/distributions/jcreole-ref.html',
                'jcreole-ref.creole'
        ]
        systemProperties 'java.util.logging.config.file': julCfgfile.path
    }
    println '''HTML reference written to 'build/distributions/jcreole-ref.html'.'''
}
ref.description='Generate JCreole Reference doc'

task html(dependsOn: ['stage', 'ensureLogCfgfile']) << {
    assert project.hasProperty('creolepath'):
        '''Property 'creolepath' is required by task 'html'.'''
    if (!project.hasProperty('htmloutPath'))
        project.htmloutPath = 'build/tmp/generated.html'
    javaexec {
        main = '-jar'
        args = [ 'build/stage/' + project.name + '-' + project.version
                + '.jar',
                '-o', 
                project.htmloutPath,
                project.creolepath
        ]
        systemProperties 'java.util.logging.config.file': julCfgfile.path
    }
    println """HTML written to '$project.htmloutPath'.
If the document includes relative links, you'll need to copy the resources
accordingly."""
}
html.description = 'Generate HTML'

task scan(dependsOn: ['compileJava', 'ensureLogCfgfile']) << {
    assert project.hasProperty('creolepath'):
        '''Property 'creolepath' is required by task 'scan'.'''
    javaexec {
        main = 'com.admc.jcreole.JFlexDriver'
        args = [project.creolepath]
        classpath file('build/classes/main')
        classpath configurations.runtime.asPath
        systemProperties 'java.util.logging.config.file': julCfgfile.path
    }
}
scan.description = 'Run JFlex scanner'

task parse(dependsOn: ['compileJava', 'ensureLogCfgfile']) << {
    assert project.hasProperty('creolepath'):
        '''Property 'creolepath' is required by task 'parse'.'''
    javaexec {
        main = 'com.admc.jcreole.JCreole'
        args = ['-', project.creolepath]
        classpath file('build/classes/main')
        classpath configurations.runtime.asPath
        systemProperties 'java.util.logging.config.file': julCfgfile.path
    }
}
scan.description = 'Run Beaver parser'

apply from: 'ivyxml-support.gradle'

// Following 3 tasks copied from
// http://blog.andresteingress.com/2011/01/14/using-gradle-in-practice/
// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn:classes) {
     classifier = 'sources'
     from sourceSets.main.allSource
}
sourcesJar.description = 'Build sources jar file'

task javadocJar(type: Jar, dependsOn:javadoc) {
     classifier = 'javadoc'
     from javadoc.destinationDir
}
sourcesJar.description = 'Build javadoc jar file'
 
// add javadoc/source jar tasks as artifacts
artifacts {
     archives sourcesJar
     archives javadocJar
}
